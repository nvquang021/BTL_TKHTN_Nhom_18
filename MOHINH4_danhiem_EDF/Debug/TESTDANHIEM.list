
TESTDANHIEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007360  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007470  08007470  00008470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007698  08007698  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007698  08007698  00008698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076a0  080076a0  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a0  080076a0  000086a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076a4  080076a4  000086a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080076a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b4  20000064  0800770c  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001418  0800770c  00009418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001566d  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031fa  00000000  00000000  0001e6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  000218f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106b  00000000  00000000  00022df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012c35  00000000  00000000  00023e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000063d9  00000000  00000000  00036a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0003ce69  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005ebc  00000000  00000000  0003ceac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000059  00000000  00000000  00042d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08007458 	.word	0x08007458

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08007458 	.word	0x08007458

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <CLCD_Delay>:


//************************** Low Level Function ****************************************************************//
static TIM_HandleTypeDef *lcdhtim = NULL;
void CLCD_Delay(uint16_t Time)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(lcdhtim, 0);
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <CLCD_Delay+0x3c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	@ 0x24
	while (Time--)
 8000950:	e007      	b.n	8000962 <CLCD_Delay+0x26>
	{
			while (__HAL_TIM_GET_COUNTER(lcdhtim) < 1000) {}
 8000952:	bf00      	nop
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <CLCD_Delay+0x3c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800095c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000960:	d3f8      	bcc.n	8000954 <CLCD_Delay+0x18>
	while (Time--)
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	1e5a      	subs	r2, r3, #1
 8000966:	80fa      	strh	r2, [r7, #6]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f2      	bne.n	8000952 <CLCD_Delay+0x16>
	}
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000080 	.word	0x20000080

0800097c <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af02      	add	r7, sp, #8
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
 8000988:	4613      	mov	r3, r2
 800098a:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	f023 030f 	bic.w	r3, r3, #15
 8000992:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	7adb      	ldrb	r3, [r3, #11]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d007      	beq.n	80009b2 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80009b2:	78bb      	ldrb	r3, [r7, #2]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d108      	bne.n	80009ca <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80009c0:	7bbb      	ldrb	r3, [r7, #14]
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	73bb      	strb	r3, [r7, #14]
 80009c8:	e00a      	b.n	80009e0 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80009ca:	78bb      	ldrb	r3, [r7, #2]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d107      	bne.n	80009e0 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff ffa6 	bl	800093c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff ff9c 	bl	800093c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000a04:	7bbb      	ldrb	r3, [r7, #14]
 8000a06:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 100);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f107 0208 	add.w	r2, r7, #8
 8000a16:	2364      	movs	r3, #100	@ 0x64
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	f001 fd32 	bl	8002484 <HAL_I2C_Master_Transmit>
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows, TIM_HandleTypeDef *htim)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4611      	mov	r1, r2
 8000a34:	461a      	mov	r2, r3
 8000a36:	460b      	mov	r3, r1
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	71bb      	strb	r3, [r7, #6]
	lcdhtim = htim;
 8000a3e:	4a36      	ldr	r2, [pc, #216]	@ (8000b18 <CLCD_I2C_Init+0xf0>)
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(lcdhtim);
 8000a44:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <CLCD_I2C_Init+0xf0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 f8bd 	bl	8003bc8 <HAL_TIM_Base_Start>
  LCD->I2C = hi2c_CLCD;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	79ba      	ldrb	r2, [r7, #6]
 8000a5e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	7e3a      	ldrb	r2, [r7, #24]
 8000a64:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2228      	movs	r2, #40	@ 0x28
 8000a6a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2206      	movs	r2, #6
 8000a70:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	220c      	movs	r2, #12
 8000a76:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2214      	movs	r2, #20
 8000a7c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2208      	movs	r2, #8
 8000a82:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000a84:	2032      	movs	r0, #50	@ 0x32
 8000a86:	f7ff ff59 	bl	800093c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2133      	movs	r1, #51	@ 0x33
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff ff74 	bl	800097c <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2133      	movs	r1, #51	@ 0x33
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f7ff ff6f 	bl	800097c <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000a9e:	2005      	movs	r0, #5
 8000aa0:	f7ff ff4c 	bl	800093c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2132      	movs	r1, #50	@ 0x32
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f7ff ff67 	bl	800097c <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000aae:	2005      	movs	r0, #5
 8000ab0:	f7ff ff44 	bl	800093c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff ff5f 	bl	800097c <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000abe:	2005      	movs	r0, #5
 8000ac0:	f7ff ff3c 	bl	800093c <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	79db      	ldrb	r3, [r3, #7]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f7ff ff55 	bl	800097c <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	7a1b      	ldrb	r3, [r3, #8]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4619      	mov	r1, r3
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff ff4e 	bl	800097c <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	7a5b      	ldrb	r3, [r3, #9]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff ff47 	bl	800097c <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	7a9b      	ldrb	r3, [r3, #10]
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff ff40 	bl	800097c <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f7ff ff3b 	bl	800097c <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2102      	movs	r1, #2
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff ff36 	bl	800097c <CLCD_WriteI2C>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000080 	.word	0x20000080

08000b1c <CLCD_I2C_SetCursor>:
    char buffer[20]; // Buffer to store the string representation of the number
    sprintf(buffer, "%.2f", number); // Convert the number to a string
    CLCD_I2C_WriteString(LCD, buffer); // Display the string on the LCD
}
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	795b      	ldrb	r3, [r3, #5]
 8000b34:	78fa      	ldrb	r2, [r7, #3]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d303      	bcc.n	8000b42 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	795b      	ldrb	r3, [r3, #5]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	799b      	ldrb	r3, [r3, #6]
 8000b46:	78ba      	ldrb	r2, [r7, #2]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d303      	bcc.n	8000b54 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	799b      	ldrb	r3, [r3, #6]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000b54:	78bb      	ldrb	r3, [r7, #2]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e013      	b.n	8000b88 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000b60:	78bb      	ldrb	r3, [r7, #2]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d103      	bne.n	8000b6e <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	3340      	adds	r3, #64	@ 0x40
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e00c      	b.n	8000b88 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000b6e:	78bb      	ldrb	r3, [r7, #2]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d103      	bne.n	8000b7c <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	3314      	adds	r3, #20
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e005      	b.n	8000b88 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000b7c:	78bb      	ldrb	r3, [r7, #2]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d102      	bne.n	8000b88 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	3354      	adds	r3, #84	@ 0x54
 8000b86:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fef1 	bl	800097c <CLCD_WriteI2C>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff fee1 	bl	800097c <CLCD_WriteI2C>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8000bcc:	e007      	b.n	8000bde <CLCD_I2C_WriteString+0x1c>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	603a      	str	r2, [r7, #0]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffe2 	bl	8000ba2 <CLCD_I2C_WriteChar>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f3      	bne.n	8000bce <CLCD_I2C_WriteString+0xc>
}
 8000be6:	bf00      	nop
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff febd 	bl	800097c <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000c02:	2005      	movs	r0, #5
 8000c04:	f7ff fe9a 	bl	800093c <CLCD_Delay>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <I2C_ReadTime>:
{
	HAL_I2C_Mem_Write(DS3231->I2C, DS3231_ADDRESS, 0, I2C_MEMADD_SIZE_8BIT, DS3231->TxTimeBuff, 3, 1000);
}

static void I2C_ReadTime(DS3231_Name* DS3231)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af04      	add	r7, sp, #16
 8000c16:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDRESS, 0, I2C_MEMADD_SIZE_8BIT, DS3231->RxTimeBuff, 3, 1000);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3307      	adds	r3, #7
 8000c20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c24:	9202      	str	r2, [sp, #8]
 8000c26:	2203      	movs	r2, #3
 8000c28:	9201      	str	r2, [sp, #4]
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	21d0      	movs	r1, #208	@ 0xd0
 8000c32:	f001 fd25 	bl	8002680 <HAL_I2C_Mem_Read>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <BCD2DEC>:
{
	HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDRESS, 3, I2C_MEMADD_SIZE_8BIT, DS3231->RxDateBuff, 4, 1000);
}

static uint8_t BCD2DEC(uint8_t data)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
	return (data>>4)*10+ (data&0x0f);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4413      	add	r3, r2
 8000c62:	b2db      	uxtb	r3, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <DS3231_Init>:
	return (data/10)<<4|(data%10);
}

//****************************************HIGH Level Layer *************************************************//
void DS3231_Init(DS3231_Name* DS3231, I2C_HandleTypeDef* I2C_In)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
	DS3231->I2C = I2C_In;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <DS3231_GetTime>:
	DS3231->TxTimeBuff[1] = DEC2BCD(Min);
	DS3231->TxTimeBuff[2] = DEC2BCD(Hour);
	I2C_WriteTime(DS3231);
}	
void DS3231_GetTime(DS3231_Name* DS3231)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	I2C_ReadTime(DS3231);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ffbd 	bl	8000c10 <I2C_ReadTime>
	DS3231->Sec = BCD2DEC(DS3231->RxTimeBuff[0]);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	79db      	ldrb	r3, [r3, #7]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffcf 	bl	8000c3e <BCD2DEC>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	751a      	strb	r2, [r3, #20]
	DS3231->Min = BCD2DEC(DS3231->RxTimeBuff[1]);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7a1b      	ldrb	r3, [r3, #8]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ffc6 	bl	8000c3e <BCD2DEC>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	74da      	strb	r2, [r3, #19]
	DS3231->Hour = BCD2DEC(DS3231->RxTimeBuff[2]);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7a5b      	ldrb	r3, [r3, #9]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffbd 	bl	8000c3e <BCD2DEC>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	749a      	strb	r2, [r3, #18]
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <vApplicationGetIdleTaskMemory+0x28>)
 8000ce4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2280      	movs	r2, #128	@ 0x80
 8000cf0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	20000084 	.word	0x20000084
 8000d00:	200000d8 	.word	0x200000d8

08000d04 <Delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Delay_us(uint16_t time)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <Delay_us+0x2c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < time) {}
 8000d16:	bf00      	nop
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <Delay_us+0x2c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3f9      	bcc.n	8000d18 <Delay_us+0x14>
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	2000032c 	.word	0x2000032c

08000d34 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <HAL_UART_RxCpltCallback+0x58>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d11d      	bne.n	8000d82 <HAL_UART_RxCpltCallback+0x4e>
	{
		if(IndexData[IndexBuff] != 'K') /*/!,,,, 0x0A = \n*/
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_UART_RxCpltCallback+0x5c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <HAL_UART_RxCpltCallback+0x60>)
 8000d4e:	5c9b      	ldrb	r3, [r3, r2]
 8000d50:	2b4b      	cmp	r3, #75	@ 0x4b
 8000d52:	d006      	beq.n	8000d62 <HAL_UART_RxCpltCallback+0x2e>
		{
			IndexBuff++;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_UART_RxCpltCallback+0x5c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_UART_RxCpltCallback+0x5c>)
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e005      	b.n	8000d6e <HAL_UART_RxCpltCallback+0x3a>
		}
		else
		{
			Flag = 1;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <HAL_UART_RxCpltCallback+0x64>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	801a      	strh	r2, [r3, #0]
			IndexBuff = 0;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_UART_RxCpltCallback+0x5c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&IndexData[IndexBuff], 1);
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_UART_RxCpltCallback+0x5c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <HAL_UART_RxCpltCallback+0x60>)
 8000d76:	4413      	add	r3, r2
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <HAL_UART_RxCpltCallback+0x68>)
 8000d7e:	f003 ff02 	bl	8004b86 <HAL_UART_Receive_IT>
	}
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40013800 	.word	0x40013800
 8000d90:	200004d6 	.word	0x200004d6
 8000d94:	200004d8 	.word	0x200004d8
 8000d98:	2000050a 	.word	0x2000050a
 8000d9c:	20000404 	.word	0x20000404

08000da0 <senTRIG>:
void senTRIG()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2110      	movs	r1, #16
 8000da8:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <senTRIG+0x24>)
 8000daa:	f001 fa0e 	bl	80021ca <HAL_GPIO_WritePin>
	Delay_us(1);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff ffa8 	bl	8000d04 <Delay_us>
	HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2110      	movs	r1, #16
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <senTRIG+0x24>)
 8000dba:	f001 fa06 	bl	80021ca <HAL_GPIO_WritePin>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim3.Instance) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d156      	bne.n	8000e8a <HAL_TIM_IC_CaptureCallback+0xc2>
        if (is_captured == 0) {
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d11a      	bne.n	8000e1a <HAL_TIM_IC_CaptureCallback+0x52>
            ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000de4:	2104      	movs	r1, #4
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f003 fb42 	bl	8004470 <HAL_TIM_ReadCapturedValue>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a2b      	ldr	r2, [pc, #172]	@ (8000e9c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000df0:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a1a      	ldr	r2, [r3, #32]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000e00:	621a      	str	r2, [r3, #32]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6a1a      	ldr	r2, [r3, #32]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0220 	orr.w	r2, r2, #32
 8000e10:	621a      	str	r2, [r3, #32]
            is_captured = 1;
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e033      	b.n	8000e82 <HAL_TIM_IC_CaptureCallback+0xba>
        } else if (is_captured == 1) {
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d12f      	bne.n	8000e82 <HAL_TIM_IC_CaptureCallback+0xba>
            ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000e22:	2104      	movs	r1, #4
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f003 fb23 	bl	8004470 <HAL_TIM_ReadCapturedValue>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e2e:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6a1a      	ldr	r2, [r3, #32]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000e3e:	621a      	str	r2, [r3, #32]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6a12      	ldr	r2, [r2, #32]
 8000e4a:	621a      	str	r2, [r3, #32]
            is_captured = 0;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
            if (ic_val2 > ic_val1) {
 8000e52:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d907      	bls.n	8000e6e <HAL_TIM_IC_CaptureCallback+0xa6>
                difference = ic_val2 - ic_val1;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e009      	b.n	8000e82 <HAL_TIM_IC_CaptureCallback+0xba>
            } else {
                difference = (0xFFFF - ic_val1) + ic_val2;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e7c:	33ff      	adds	r3, #255	@ 0xff
 8000e7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ea4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e80:	6013      	str	r3, [r2, #0]
            }
        }
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000e82:	2104      	movs	r1, #4
 8000e84:	4803      	ldr	r0, [pc, #12]	@ (8000e94 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000e86:	f002 ff93 	bl	8003db0 <HAL_TIM_IC_Start_IT>
    }
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000374 	.word	0x20000374
 8000e98:	200004d4 	.word	0x200004d4
 8000e9c:	200004c8 	.word	0x200004c8
 8000ea0:	200004cc 	.word	0x200004cc
 8000ea4:	200004d0 	.word	0x200004d0

08000ea8 <Read_HCR05>:

uint8_t Read_HCR05()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	senTRIG();
 8000eac:	f7ff ff78 	bl	8000da0 <senTRIG>
	return distance = (difference * 0.0343) / 2;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <Read_HCR05+0x58>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fa95 	bl	80003e4 <__aeabi_ui2d>
 8000eba:	a30f      	add	r3, pc, #60	@ (adr r3, 8000ef8 <Read_HCR05+0x50>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	f7ff fb0a 	bl	80004d8 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ed4:	f7ff fc2a 	bl	800072c <__aeabi_ddiv>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fd0c 	bl	80008fc <__aeabi_d2uiz>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <Read_HCR05+0x5c>)
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <Read_HCR05+0x5c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	04816f00 	.word	0x04816f00
 8000efc:	3fa18fc5 	.word	0x3fa18fc5
 8000f00:	200004d0 	.word	0x200004d0
 8000f04:	200004d5 	.word	0x200004d5

08000f08 <TINHTOAN>:
void TINHTOAN(uint8_t Flag)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
    if(Flag)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00d      	beq.n	8000f34 <TINHTOAN+0x2c>
    {
        if(IndexData[0] == 'T')
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <TINHTOAN+0x34>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b54      	cmp	r3, #84	@ 0x54
 8000f1e:	d107      	bne.n	8000f30 <TINHTOAN+0x28>
        {
            timesend = atoi(IndexData + 1);
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <TINHTOAN+0x38>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 fd60 	bl	80069e8 <atoi>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <TINHTOAN+0x3c>)
 8000f2e:	801a      	strh	r2, [r3, #0]
        }
        Flag = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	71fb      	strb	r3, [r7, #7]
    }
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200004d8 	.word	0x200004d8
 8000f40:	200004d9 	.word	0x200004d9
 8000f44:	20000000 	.word	0x20000000

08000f48 <Xlnutan>:
void Xlnutan()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(OK_GPIO_Port,OK_Pin) == 1)
 8000f4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <Xlnutan+0x44>)
 8000f52:	f001 f923 	bl	800219c <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d106      	bne.n	8000f6a <Xlnutan+0x22>
	{
		mode = 0;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <Xlnutan+0x48>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
		CLCD_I2C_Clear(&LCD1);
 8000f62:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <Xlnutan+0x4c>)
 8000f64:	f7ff fe44 	bl	8000bf0 <CLCD_I2C_Clear>
	else if(HAL_GPIO_ReadPin(TANG_GPIO_Port,TANG_Pin) == 1)
	{
		mode = 1;
		CLCD_I2C_Clear(&LCD1);
	}
}
 8000f68:	e00d      	b.n	8000f86 <Xlnutan+0x3e>
	else if(HAL_GPIO_ReadPin(TANG_GPIO_Port,TANG_Pin) == 1)
 8000f6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f6e:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <Xlnutan+0x44>)
 8000f70:	f001 f914 	bl	800219c <HAL_GPIO_ReadPin>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d105      	bne.n	8000f86 <Xlnutan+0x3e>
		mode = 1;
 8000f7a:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <Xlnutan+0x48>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
		CLCD_I2C_Clear(&LCD1);
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <Xlnutan+0x4c>)
 8000f82:	f7ff fe35 	bl	8000bf0 <CLCD_I2C_Clear>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	20000528 	.word	0x20000528
 8000f94:	2000045c 	.word	0x2000045c

08000f98 <Xldulieu>:
void Xldulieu()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af02      	add	r7, sp, #8
	TINHTOAN(Flag);
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <Xldulieu+0x50>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ffaf 	bl	8000f08 <TINHTOAN>
	sprintf(text1,"Kc do:%d  ",KCDO);
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <Xldulieu+0x54>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	490f      	ldr	r1, [pc, #60]	@ (8000ff0 <Xldulieu+0x58>)
 8000fb2:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <Xldulieu+0x5c>)
 8000fb4:	f005 fda0 	bl	8006af8 <siprintf>
	sprintf(text2,"khoang cach:%d\r\n",KCDO);
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <Xldulieu+0x54>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	490e      	ldr	r1, [pc, #56]	@ (8000ff8 <Xldulieu+0x60>)
 8000fc0:	480e      	ldr	r0, [pc, #56]	@ (8000ffc <Xldulieu+0x64>)
 8000fc2:	f005 fd99 	bl	8006af8 <siprintf>
	sprintf(text3,"TIME:%d:%d:%d  ",DS3231.Hour,DS3231.Min,DS3231.Sec);
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <Xldulieu+0x68>)
 8000fc8:	7c9b      	ldrb	r3, [r3, #18]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <Xldulieu+0x68>)
 8000fce:	7cdb      	ldrb	r3, [r3, #19]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <Xldulieu+0x68>)
 8000fd4:	7d1b      	ldrb	r3, [r3, #20]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	490a      	ldr	r1, [pc, #40]	@ (8001004 <Xldulieu+0x6c>)
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <Xldulieu+0x70>)
 8000fde:	f005 fd8b 	bl	8006af8 <siprintf>
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000050a 	.word	0x2000050a
 8000fec:	20000458 	.word	0x20000458
 8000ff0:	08007470 	.word	0x08007470
 8000ff4:	20000468 	.word	0x20000468
 8000ff8:	0800747c 	.word	0x0800747c
 8000ffc:	20000488 	.word	0x20000488
 8001000:	2000050c 	.word	0x2000050c
 8001004:	08007490 	.word	0x08007490
 8001008:	200004a8 	.word	0x200004a8

0800100c <Hienthilcd>:

void Hienthilcd()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	if(mode == 0)
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <Hienthilcd+0x64>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d112      	bne.n	800103e <Hienthilcd+0x32>
	{
		CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	4815      	ldr	r0, [pc, #84]	@ (8001074 <Hienthilcd+0x68>)
 800101e:	f7ff fd7d 	bl	8000b1c <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"CHE DO 1");
 8001022:	4915      	ldr	r1, [pc, #84]	@ (8001078 <Hienthilcd+0x6c>)
 8001024:	4813      	ldr	r0, [pc, #76]	@ (8001074 <Hienthilcd+0x68>)
 8001026:	f7ff fdcc 	bl	8000bc2 <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800102a:	2201      	movs	r2, #1
 800102c:	2100      	movs	r1, #0
 800102e:	4811      	ldr	r0, [pc, #68]	@ (8001074 <Hienthilcd+0x68>)
 8001030:	f7ff fd74 	bl	8000b1c <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,text1);
 8001034:	4911      	ldr	r1, [pc, #68]	@ (800107c <Hienthilcd+0x70>)
 8001036:	480f      	ldr	r0, [pc, #60]	@ (8001074 <Hienthilcd+0x68>)
 8001038:	f7ff fdc3 	bl	8000bc2 <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(&LCD1, 0, 0);
		CLCD_I2C_WriteString(&LCD1,"CHE DO 2");
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
		CLCD_I2C_WriteString(&LCD1,text3);
	}
}
 800103c:	e015      	b.n	800106a <Hienthilcd+0x5e>
	else if(mode == 1)
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <Hienthilcd+0x64>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d111      	bne.n	800106a <Hienthilcd+0x5e>
		CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	480a      	ldr	r0, [pc, #40]	@ (8001074 <Hienthilcd+0x68>)
 800104c:	f7ff fd66 	bl	8000b1c <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"CHE DO 2");
 8001050:	490b      	ldr	r1, [pc, #44]	@ (8001080 <Hienthilcd+0x74>)
 8001052:	4808      	ldr	r0, [pc, #32]	@ (8001074 <Hienthilcd+0x68>)
 8001054:	f7ff fdb5 	bl	8000bc2 <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	2100      	movs	r1, #0
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <Hienthilcd+0x68>)
 800105e:	f7ff fd5d 	bl	8000b1c <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,text3);
 8001062:	4908      	ldr	r1, [pc, #32]	@ (8001084 <Hienthilcd+0x78>)
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <Hienthilcd+0x68>)
 8001066:	f7ff fdac 	bl	8000bc2 <CLCD_I2C_WriteString>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000528 	.word	0x20000528
 8001074:	2000045c 	.word	0x2000045c
 8001078:	080074a0 	.word	0x080074a0
 800107c:	20000468 	.word	0x20000468
 8001080:	080074ac 	.word	0x080074ac
 8001084:	200004a8 	.word	0x200004a8

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b098      	sub	sp, #96	@ 0x60
 800108c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f000 fd3d 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 f885 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f000 fa2b 	bl	80014f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800109a:	f000 f8c7 	bl	800122c <MX_I2C1_Init>
  MX_TIM3_Init();
 800109e:	f000 f93f 	bl	8001320 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80010a2:	f000 f9fb 	bl	800149c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010a6:	f000 f8ef 	bl	8001288 <MX_TIM2_Init>
  MX_TIM4_Init();
 80010aa:	f000 f9a9 	bl	8001400 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&IndexData[IndexBuff], 1);
 80010ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <main+0xdc>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <main+0xe0>)
 80010b6:	4413      	add	r3, r2
 80010b8:	2201      	movs	r2, #1
 80010ba:	4619      	mov	r1, r3
 80010bc:	482b      	ldr	r0, [pc, #172]	@ (800116c <main+0xe4>)
 80010be:	f003 fd62 	bl	8004b86 <HAL_UART_Receive_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80010c2:	2104      	movs	r1, #4
 80010c4:	482a      	ldr	r0, [pc, #168]	@ (8001170 <main+0xe8>)
 80010c6:	f002 fe73 	bl	8003db0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 80010ca:	482a      	ldr	r0, [pc, #168]	@ (8001174 <main+0xec>)
 80010cc:	f002 fd7c 	bl	8003bc8 <HAL_TIM_Base_Start>
	CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,16,02,&htim4);
 80010d0:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <main+0xf0>)
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	2302      	movs	r3, #2
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2310      	movs	r3, #16
 80010da:	224e      	movs	r2, #78	@ 0x4e
 80010dc:	4927      	ldr	r1, [pc, #156]	@ (800117c <main+0xf4>)
 80010de:	4828      	ldr	r0, [pc, #160]	@ (8001180 <main+0xf8>)
 80010e0:	f7ff fca2 	bl	8000a28 <CLCD_I2C_Init>
	DS3231_Init(&DS3231, &hi2c1);
 80010e4:	4925      	ldr	r1, [pc, #148]	@ (800117c <main+0xf4>)
 80010e6:	4827      	ldr	r0, [pc, #156]	@ (8001184 <main+0xfc>)
 80010e8:	f7ff fdc1 	bl	8000c6e <DS3231_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80010ec:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <main+0x100>)
 80010ee:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80010f2:	461d      	mov	r5, r3
 80010f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001100:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f004 fa92 	bl	8005630 <osThreadCreate>
 800110c:	4603      	mov	r3, r0
 800110e:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <main+0x104>)
 8001110:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityLow, 0, 128);
 8001112:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <main+0x108>)
 8001114:	f107 0420 	add.w	r4, r7, #32
 8001118:	461d      	mov	r5, r3
 800111a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f004 fa7f 	bl	8005630 <osThreadCreate>
 8001132:	4603      	mov	r3, r0
 8001134:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <main+0x10c>)
 8001136:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityLow, 0, 128);
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <main+0x110>)
 800113a:	1d3c      	adds	r4, r7, #4
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f004 fa6e 	bl	8005630 <osThreadCreate>
 8001154:	4603      	mov	r3, r0
 8001156:	4a11      	ldr	r2, [pc, #68]	@ (800119c <main+0x114>)
 8001158:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800115a:	f004 fa62 	bl	8005622 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115e:	bf00      	nop
 8001160:	e7fd      	b.n	800115e <main+0xd6>
 8001162:	bf00      	nop
 8001164:	200004d6 	.word	0x200004d6
 8001168:	200004d8 	.word	0x200004d8
 800116c:	20000404 	.word	0x20000404
 8001170:	20000374 	.word	0x20000374
 8001174:	2000032c 	.word	0x2000032c
 8001178:	200003bc 	.word	0x200003bc
 800117c:	200002d8 	.word	0x200002d8
 8001180:	2000045c 	.word	0x2000045c
 8001184:	2000050c 	.word	0x2000050c
 8001188:	080074c4 	.word	0x080074c4
 800118c:	2000044c 	.word	0x2000044c
 8001190:	080074ec 	.word	0x080074ec
 8001194:	20000450 	.word	0x20000450
 8001198:	08007514 	.word	0x08007514
 800119c:	20000454 	.word	0x20000454

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b090      	sub	sp, #64	@ 0x40
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	2228      	movs	r2, #40	@ 0x28
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 fcc2 	bl	8006b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d4:	2302      	movs	r3, #2
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 f85d 	bl	80032a8 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011f4:	f000 fa2e 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2102      	movs	r1, #2
 8001212:	4618      	mov	r0, r3
 8001214:	f002 faca 	bl	80037ac <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800121e:	f000 fa19 	bl	8001654 <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3740      	adds	r7, #64	@ 0x40
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C1_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_I2C1_Init+0x50>)
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x58>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_I2C1_Init+0x50>)
 800124a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800124e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_I2C1_Init+0x50>)
 800126a:	f000 ffc7 	bl	80021fc <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001274:	f000 f9ee 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200002d8 	.word	0x200002d8
 8001280:	40005400 	.word	0x40005400
 8001284:	00061a80 	.word	0x00061a80

08001288 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <MX_TIM2_Init+0x94>)
 80012a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_TIM2_Init+0x94>)
 80012ae:	2247      	movs	r2, #71	@ 0x47
 80012b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_TIM2_Init+0x94>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_TIM2_Init+0x94>)
 80012ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_TIM2_Init+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_TIM2_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012cc:	4813      	ldr	r0, [pc, #76]	@ (800131c <MX_TIM2_Init+0x94>)
 80012ce:	f002 fc2b 	bl	8003b28 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012d8:	f000 f9bc 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <MX_TIM2_Init+0x94>)
 80012ea:	f002 fff9 	bl	80042e0 <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f4:	f000 f9ae 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_TIM2_Init+0x94>)
 8001306:	f003 fb49 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 f9a0 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000032c 	.word	0x2000032c

08001320 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0318 	add.w	r3, r7, #24
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134a:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 800134c:	4a2b      	ldr	r2, [pc, #172]	@ (80013fc <MX_TIM3_Init+0xdc>)
 800134e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001350:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 8001352:	2247      	movs	r2, #71	@ 0x47
 8001354:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800135c:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 800135e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001362:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001370:	4821      	ldr	r0, [pc, #132]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 8001372:	f002 fbd9 	bl	8003b28 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800137c:	f000 f96a 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001384:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	4619      	mov	r1, r3
 800138c:	481a      	ldr	r0, [pc, #104]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 800138e:	f002 ffa7 	bl	80042e0 <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001398:	f000 f95c 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800139c:	4816      	ldr	r0, [pc, #88]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 800139e:	f002 fcaf 	bl	8003d00 <HAL_TIM_IC_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013a8:	f000 f954 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	480f      	ldr	r0, [pc, #60]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 80013bc:	f003 faee 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80013c6:	f000 f945 	bl	8001654 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ce:	2301      	movs	r3, #1
 80013d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	2204      	movs	r2, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_TIM3_Init+0xd8>)
 80013e2:	f002 fee1 	bl	80041a8 <HAL_TIM_IC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80013ec:	f000 f932 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	@ 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000374 	.word	0x20000374
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_TIM4_Init+0x94>)
 800141e:	4a1e      	ldr	r2, [pc, #120]	@ (8001498 <MX_TIM4_Init+0x98>)
 8001420:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <MX_TIM4_Init+0x94>)
 8001424:	2247      	movs	r2, #71	@ 0x47
 8001426:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_TIM4_Init+0x94>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800142e:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <MX_TIM4_Init+0x94>)
 8001430:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001434:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <MX_TIM4_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <MX_TIM4_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001442:	4814      	ldr	r0, [pc, #80]	@ (8001494 <MX_TIM4_Init+0x94>)
 8001444:	f002 fb70 	bl	8003b28 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800144e:	f000 f901 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	@ (8001494 <MX_TIM4_Init+0x94>)
 8001460:	f002 ff3e 	bl	80042e0 <HAL_TIM_ConfigClockSource>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f8f3 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	@ (8001494 <MX_TIM4_Init+0x94>)
 800147c:	f003 fa8e 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001486:	f000 f8e5 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200003bc 	.word	0x200003bc
 8001498:	40000800 	.word	0x40000800

0800149c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_USART1_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014d4:	f003 fad2 	bl	8004a7c <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 f8b9 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000404 	.word	0x20000404
 80014ec:	40013800 	.word	0x40013800

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001504:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <MX_GPIO_Init+0xa4>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a22      	ldr	r2, [pc, #136]	@ (8001594 <MX_GPIO_Init+0xa4>)
 800150a:	f043 0320 	orr.w	r3, r3, #32
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <MX_GPIO_Init+0xa4>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <MX_GPIO_Init+0xa4>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a1c      	ldr	r2, [pc, #112]	@ (8001594 <MX_GPIO_Init+0xa4>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <MX_GPIO_Init+0xa4>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <MX_GPIO_Init+0xa4>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <MX_GPIO_Init+0xa4>)
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <MX_GPIO_Init+0xa4>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2110      	movs	r1, #16
 8001550:	4811      	ldr	r0, [pc, #68]	@ (8001598 <MX_GPIO_Init+0xa8>)
 8001552:	f000 fe3a 	bl	80021ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001556:	2310      	movs	r3, #16
 8001558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2302      	movs	r3, #2
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	480a      	ldr	r0, [pc, #40]	@ (8001598 <MX_GPIO_Init+0xa8>)
 800156e:	f000 fc91 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : OK_Pin TANG_Pin */
  GPIO_InitStruct.Pin = OK_Pin|TANG_Pin;
 8001572:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4804      	ldr	r0, [pc, #16]	@ (8001598 <MX_GPIO_Init+0xa8>)
 8001588:	f000 fc84 	bl	8001e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	40010c00 	.word	0x40010c00

0800159c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Transmit_IT(&huart1,(uint8_t*)"Task1 Running..",strlen("Task1 Running.."));
	  KCDO = Read_HCR05();
 80015a4:	f7ff fc80 	bl	8000ea8 <Read_HCR05>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <StartDefaultTask+0x24>)
 80015ae:	601a      	str	r2, [r3, #0]
	  DS3231_GetTime(&DS3231);
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <StartDefaultTask+0x28>)
 80015b2:	f7ff fb69 	bl	8000c88 <DS3231_GetTime>
	  osDelay(100);
 80015b6:	2064      	movs	r0, #100	@ 0x64
 80015b8:	f004 f886 	bl	80056c8 <osDelay>
	  KCDO = Read_HCR05();
 80015bc:	bf00      	nop
 80015be:	e7f1      	b.n	80015a4 <StartDefaultTask+0x8>
 80015c0:	20000458 	.word	0x20000458
 80015c4:	2000050c 	.word	0x2000050c

080015c8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Transmit_IT(&huart1,(uint8_t*)"Task2 Running..",strlen("Task2 Running.."));
	  HAL_UART_Transmit_IT(&huart1,(uint8_t*)text2,strlen(text2));
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <StartTask02+0x2c>)
 80015d2:	f7fe fdbd 	bl	8000150 <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b29b      	uxth	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	4905      	ldr	r1, [pc, #20]	@ (80015f4 <StartTask02+0x2c>)
 80015de:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <StartTask02+0x30>)
 80015e0:	f003 fa9c 	bl	8004b1c <HAL_UART_Transmit_IT>
	  osDelay(timesend*1);
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <StartTask02+0x34>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 f86d 	bl	80056c8 <osDelay>
	  HAL_UART_Transmit_IT(&huart1,(uint8_t*)text2,strlen(text2));
 80015ee:	bf00      	nop
 80015f0:	e7ee      	b.n	80015d0 <StartTask02+0x8>
 80015f2:	bf00      	nop
 80015f4:	20000488 	.word	0x20000488
 80015f8:	20000404 	.word	0x20000404
 80015fc:	20000000 	.word	0x20000000

08001600 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Transmit_IT(&huart1,(uint8_t*)"Task3 Running..",strlen("Task3 Running.."));
	  TINHTOAN(Flag);
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <StartTask03+0x2c>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fc7a 	bl	8000f08 <TINHTOAN>
	  Xldulieu();
 8001614:	f7ff fcc0 	bl	8000f98 <Xldulieu>
	  Xlnutan();
 8001618:	f7ff fc96 	bl	8000f48 <Xlnutan>
	  Hienthilcd();
 800161c:	f7ff fcf6 	bl	800100c <Hienthilcd>
	  osDelay(100);
 8001620:	2064      	movs	r0, #100	@ 0x64
 8001622:	f004 f851 	bl	80056c8 <osDelay>
	  TINHTOAN(Flag);
 8001626:	bf00      	nop
 8001628:	e7ee      	b.n	8001608 <StartTask03+0x8>
 800162a:	bf00      	nop
 800162c:	2000050a 	.word	0x2000050a

08001630 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001642:	f000 fa79 	bl	8001b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40012c00 	.word	0x40012c00

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <Error_Handler+0x8>

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <HAL_MspInit+0x68>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <HAL_MspInit+0x68>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_MspInit+0x68>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_MspInit+0x68>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a11      	ldr	r2, [pc, #68]	@ (80016c8 <HAL_MspInit+0x68>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_MspInit+0x68>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	210f      	movs	r1, #15
 800169a:	f06f 0001 	mvn.w	r0, #1
 800169e:	f000 fb1c 	bl	8001cda <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_MspInit+0x6c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <HAL_MspInit+0x6c>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a15      	ldr	r2, [pc, #84]	@ (8001740 <HAL_I2C_MspInit+0x70>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d123      	bne.n	8001738 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001708:	23c0      	movs	r3, #192	@ 0xc0
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480b      	ldr	r0, [pc, #44]	@ (8001748 <HAL_I2C_MspInit+0x78>)
 800171c:	f000 fbba 	bl	8001e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 8001726:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800172a:	61d3      	str	r3, [r2, #28]
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40005400 	.word	0x40005400
 8001744:	40021000 	.word	0x40021000
 8001748:	40010c00 	.word	0x40010c00

0800174c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	@ 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800176a:	d10c      	bne.n	8001786 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176c:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	61d3      	str	r3, [r2, #28]
 8001778:	4b2f      	ldr	r3, [pc, #188]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001784:	e054      	b.n	8001830 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2c      	ldr	r2, [pc, #176]	@ (800183c <HAL_TIM_Base_MspInit+0xf0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d13e      	bne.n	800180e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001790:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4a28      	ldr	r2, [pc, #160]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 8001796:	f043 0302 	orr.w	r3, r3, #2
 800179a:	61d3      	str	r3, [r2, #28]
 800179c:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a8:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a22      	ldr	r2, [pc, #136]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017c0:	2320      	movs	r3, #32
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	481b      	ldr	r0, [pc, #108]	@ (8001840 <HAL_TIM_Base_MspInit+0xf4>)
 80017d4:	f000 fb5e 	bl	8001e94 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80017d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <HAL_TIM_Base_MspInit+0xf8>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017f6:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <HAL_TIM_Base_MspInit+0xf8>)
 80017f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fa:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2105      	movs	r1, #5
 8001800:	201d      	movs	r0, #29
 8001802:	f000 fa6a 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001806:	201d      	movs	r0, #29
 8001808:	f000 fa83 	bl	8001d12 <HAL_NVIC_EnableIRQ>
}
 800180c:	e010      	b.n	8001830 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM4)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <HAL_TIM_Base_MspInit+0xfc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d10b      	bne.n	8001830 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	4a06      	ldr	r2, [pc, #24]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	61d3      	str	r3, [r2, #28]
 8001824:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <HAL_TIM_Base_MspInit+0xec>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	@ 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	40000400 	.word	0x40000400
 8001840:	40010c00 	.word	0x40010c00
 8001844:	40010000 	.word	0x40010000
 8001848:	40000800 	.word	0x40000800

0800184c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a20      	ldr	r2, [pc, #128]	@ (80018e8 <HAL_UART_MspInit+0x9c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d139      	bne.n	80018e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <HAL_UART_MspInit+0xa0>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <HAL_UART_MspInit+0xa0>)
 8001872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <HAL_UART_MspInit+0xa0>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_UART_MspInit+0xa0>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a18      	ldr	r2, [pc, #96]	@ (80018ec <HAL_UART_MspInit+0xa0>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <HAL_UART_MspInit+0xa0>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800189c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	480f      	ldr	r0, [pc, #60]	@ (80018f0 <HAL_UART_MspInit+0xa4>)
 80018b2:	f000 faef 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4619      	mov	r1, r3
 80018ca:	4809      	ldr	r0, [pc, #36]	@ (80018f0 <HAL_UART_MspInit+0xa4>)
 80018cc:	f000 fae2 	bl	8001e94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2105      	movs	r1, #5
 80018d4:	2025      	movs	r0, #37	@ 0x25
 80018d6:	f000 fa00 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018da:	2025      	movs	r0, #37	@ 0x25
 80018dc:	f000 fa19 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010800 	.word	0x40010800

080018f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	@ 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800190a:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <HAL_InitTick+0xd0>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a2d      	ldr	r2, [pc, #180]	@ (80019c4 <HAL_InitTick+0xd0>)
 8001910:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <HAL_InitTick+0xd0>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001922:	f107 020c 	add.w	r2, r7, #12
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f002 f8ad 	bl	8003a8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001932:	f002 f897 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 8001936:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193a:	4a23      	ldr	r2, [pc, #140]	@ (80019c8 <HAL_InitTick+0xd4>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	0c9b      	lsrs	r3, r3, #18
 8001942:	3b01      	subs	r3, #1
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001946:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <HAL_InitTick+0xd8>)
 8001948:	4a21      	ldr	r2, [pc, #132]	@ (80019d0 <HAL_InitTick+0xdc>)
 800194a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800194c:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <HAL_InitTick+0xd8>)
 800194e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001952:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001954:	4a1d      	ldr	r2, [pc, #116]	@ (80019cc <HAL_InitTick+0xd8>)
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800195a:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <HAL_InitTick+0xd8>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_InitTick+0xd8>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001966:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <HAL_InitTick+0xd8>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800196c:	4817      	ldr	r0, [pc, #92]	@ (80019cc <HAL_InitTick+0xd8>)
 800196e:	f002 f8db 	bl	8003b28 <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800197c:	2b00      	cmp	r3, #0
 800197e:	d11b      	bne.n	80019b8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001980:	4812      	ldr	r0, [pc, #72]	@ (80019cc <HAL_InitTick+0xd8>)
 8001982:	f002 f96b 	bl	8003c5c <HAL_TIM_Base_Start_IT>
 8001986:	4603      	mov	r3, r0
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800198c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001990:	2b00      	cmp	r3, #0
 8001992:	d111      	bne.n	80019b8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001994:	2019      	movs	r0, #25
 8001996:	f000 f9bc 	bl	8001d12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d808      	bhi.n	80019b2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	2019      	movs	r0, #25
 80019a6:	f000 f998 	bl	8001cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_InitTick+0xe0>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	e002      	b.n	80019b8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3730      	adds	r7, #48	@ 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	431bde83 	.word	0x431bde83
 80019cc:	2000052c 	.word	0x2000052c
 80019d0:	40012c00 	.word	0x40012c00
 80019d4:	20000008 	.word	0x20000008

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <NMI_Handler+0x4>

080019e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <MemManage_Handler+0x4>

080019f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <UsageFault_Handler+0x4>

08001a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <TIM1_UP_IRQHandler+0x10>)
 8001a12:	f002 fad9 	bl	8003fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000052c 	.word	0x2000052c

08001a20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <TIM3_IRQHandler+0x10>)
 8001a26:	f002 facf 	bl	8003fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000374 	.word	0x20000374

08001a34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <USART1_IRQHandler+0x10>)
 8001a3a:	f003 f8c9 	bl	8004bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000404 	.word	0x20000404

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f005 f866 	bl	8006b48 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20005000 	.word	0x20005000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	20000574 	.word	0x20000574
 8001ab0:	20001418 	.word	0x20001418

08001ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac0:	f7ff fff8 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480b      	ldr	r0, [pc, #44]	@ (8001af4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ac6:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001adc:	4c09      	ldr	r4, [pc, #36]	@ (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aea:	f005 f833 	bl	8006b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aee:	f7ff facb 	bl	8001088 <main>
  bx lr
 8001af2:	4770      	bx	lr
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001afc:	080076a8 	.word	0x080076a8
  ldr r2, =_sbss
 8001b00:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b04:	20001418 	.word	0x20001418

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_Init+0x28>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <HAL_Init+0x28>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f8d1 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	200f      	movs	r0, #15
 8001b24:	f7ff fee6 	bl	80018f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fd9a 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_IncTick+0x1c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a03      	ldr	r2, [pc, #12]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	20000578 	.word	0x20000578

08001b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b02      	ldr	r3, [pc, #8]	@ (8001b6c <HAL_GetTick+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000578 	.word	0x20000578

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4906      	ldr	r1, [pc, #24]	@ (8001c08 <__NVIC_EnableIRQ+0x34>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	@ (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	@ 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff4f 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff64 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ffb2 	bl	8001c60 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff81 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff57 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d008      	beq.n	8001d58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e020      	b.n	8001d9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 020e 	bic.w	r2, r2, #14
 8001d66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d005      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e051      	b.n	8001e6c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 020e 	bic.w	r2, r2, #14
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a22      	ldr	r2, [pc, #136]	@ (8001e78 <HAL_DMA_Abort_IT+0xd4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d029      	beq.n	8001e46 <HAL_DMA_Abort_IT+0xa2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a21      	ldr	r2, [pc, #132]	@ (8001e7c <HAL_DMA_Abort_IT+0xd8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d022      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x9e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1f      	ldr	r2, [pc, #124]	@ (8001e80 <HAL_DMA_Abort_IT+0xdc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01a      	beq.n	8001e3c <HAL_DMA_Abort_IT+0x98>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e84 <HAL_DMA_Abort_IT+0xe0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d012      	beq.n	8001e36 <HAL_DMA_Abort_IT+0x92>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <HAL_DMA_Abort_IT+0xe4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00a      	beq.n	8001e30 <HAL_DMA_Abort_IT+0x8c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e8c <HAL_DMA_Abort_IT+0xe8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d102      	bne.n	8001e2a <HAL_DMA_Abort_IT+0x86>
 8001e24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e28:	e00e      	b.n	8001e48 <HAL_DMA_Abort_IT+0xa4>
 8001e2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e2e:	e00b      	b.n	8001e48 <HAL_DMA_Abort_IT+0xa4>
 8001e30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e34:	e008      	b.n	8001e48 <HAL_DMA_Abort_IT+0xa4>
 8001e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e3a:	e005      	b.n	8001e48 <HAL_DMA_Abort_IT+0xa4>
 8001e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e40:	e002      	b.n	8001e48 <HAL_DMA_Abort_IT+0xa4>
 8001e42:	2310      	movs	r3, #16
 8001e44:	e000      	b.n	8001e48 <HAL_DMA_Abort_IT+0xa4>
 8001e46:	2301      	movs	r3, #1
 8001e48:	4a11      	ldr	r2, [pc, #68]	@ (8001e90 <HAL_DMA_Abort_IT+0xec>)
 8001e4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
    } 
  }
  return status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020008 	.word	0x40020008
 8001e7c:	4002001c 	.word	0x4002001c
 8001e80:	40020030 	.word	0x40020030
 8001e84:	40020044 	.word	0x40020044
 8001e88:	40020058 	.word	0x40020058
 8001e8c:	4002006c 	.word	0x4002006c
 8001e90:	40020000 	.word	0x40020000

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b08b      	sub	sp, #44	@ 0x2c
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	e169      	b.n	800217c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 8158 	bne.w	8002176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a9a      	ldr	r2, [pc, #616]	@ (8002134 <HAL_GPIO_Init+0x2a0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d05e      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ed0:	4a98      	ldr	r2, [pc, #608]	@ (8002134 <HAL_GPIO_Init+0x2a0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d875      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a98      	ldr	r2, [pc, #608]	@ (8002138 <HAL_GPIO_Init+0x2a4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d058      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001edc:	4a96      	ldr	r2, [pc, #600]	@ (8002138 <HAL_GPIO_Init+0x2a4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d86f      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a96      	ldr	r2, [pc, #600]	@ (800213c <HAL_GPIO_Init+0x2a8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d052      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ee8:	4a94      	ldr	r2, [pc, #592]	@ (800213c <HAL_GPIO_Init+0x2a8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d869      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001eee:	4a94      	ldr	r2, [pc, #592]	@ (8002140 <HAL_GPIO_Init+0x2ac>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04c      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ef4:	4a92      	ldr	r2, [pc, #584]	@ (8002140 <HAL_GPIO_Init+0x2ac>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d863      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001efa:	4a92      	ldr	r2, [pc, #584]	@ (8002144 <HAL_GPIO_Init+0x2b0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d046      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001f00:	4a90      	ldr	r2, [pc, #576]	@ (8002144 <HAL_GPIO_Init+0x2b0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d85d      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f06:	2b12      	cmp	r3, #18
 8001f08:	d82a      	bhi.n	8001f60 <HAL_GPIO_Init+0xcc>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d859      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f14 <HAL_GPIO_Init+0x80>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f69 	.word	0x08001f69
 8001f1c:	08001f7b 	.word	0x08001f7b
 8001f20:	08001fbd 	.word	0x08001fbd
 8001f24:	08001fc3 	.word	0x08001fc3
 8001f28:	08001fc3 	.word	0x08001fc3
 8001f2c:	08001fc3 	.word	0x08001fc3
 8001f30:	08001fc3 	.word	0x08001fc3
 8001f34:	08001fc3 	.word	0x08001fc3
 8001f38:	08001fc3 	.word	0x08001fc3
 8001f3c:	08001fc3 	.word	0x08001fc3
 8001f40:	08001fc3 	.word	0x08001fc3
 8001f44:	08001fc3 	.word	0x08001fc3
 8001f48:	08001fc3 	.word	0x08001fc3
 8001f4c:	08001fc3 	.word	0x08001fc3
 8001f50:	08001fc3 	.word	0x08001fc3
 8001f54:	08001fc3 	.word	0x08001fc3
 8001f58:	08001f71 	.word	0x08001f71
 8001f5c:	08001f85 	.word	0x08001f85
 8001f60:	4a79      	ldr	r2, [pc, #484]	@ (8002148 <HAL_GPIO_Init+0x2b4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f66:	e02c      	b.n	8001fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e029      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	3304      	adds	r3, #4
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e024      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	3308      	adds	r3, #8
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e01f      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	330c      	adds	r3, #12
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e01a      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f96:	2304      	movs	r3, #4
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e013      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	611a      	str	r2, [r3, #16]
          break;
 8001fae:	e009      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	615a      	str	r2, [r3, #20]
          break;
 8001fba:	e003      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          break;
 8001fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	@ 0xff
 8001fc8:	d801      	bhi.n	8001fce <HAL_GPIO_Init+0x13a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	e001      	b.n	8001fd2 <HAL_GPIO_Init+0x13e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2bff      	cmp	r3, #255	@ 0xff
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_GPIO_Init+0x14c>
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	e002      	b.n	8001fe6 <HAL_GPIO_Init+0x152>
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	3b08      	subs	r3, #8
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	210f      	movs	r1, #15
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	6a39      	ldr	r1, [r7, #32]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80b1 	beq.w	8002176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002014:	4b4d      	ldr	r3, [pc, #308]	@ (800214c <HAL_GPIO_Init+0x2b8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a4c      	ldr	r2, [pc, #304]	@ (800214c <HAL_GPIO_Init+0x2b8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b4a      	ldr	r3, [pc, #296]	@ (800214c <HAL_GPIO_Init+0x2b8>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800202c:	4a48      	ldr	r2, [pc, #288]	@ (8002150 <HAL_GPIO_Init+0x2bc>)
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a40      	ldr	r2, [pc, #256]	@ (8002154 <HAL_GPIO_Init+0x2c0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_GPIO_Init+0x1ec>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3f      	ldr	r2, [pc, #252]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00d      	beq.n	800207c <HAL_GPIO_Init+0x1e8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3e      	ldr	r2, [pc, #248]	@ (800215c <HAL_GPIO_Init+0x2c8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x1e4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3d      	ldr	r2, [pc, #244]	@ (8002160 <HAL_GPIO_Init+0x2cc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_GPIO_Init+0x1e0>
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002074:	2304      	movs	r3, #4
 8002076:	e004      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002078:	2302      	movs	r3, #2
 800207a:	e002      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002080:	2300      	movs	r3, #0
 8002082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002092:	492f      	ldr	r1, [pc, #188]	@ (8002150 <HAL_GPIO_Init+0x2bc>)
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	492c      	ldr	r1, [pc, #176]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4928      	ldr	r1, [pc, #160]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d4:	4b23      	ldr	r3, [pc, #140]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4922      	ldr	r1, [pc, #136]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e2:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	491e      	ldr	r1, [pc, #120]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020fc:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4918      	ldr	r1, [pc, #96]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	4914      	ldr	r1, [pc, #80]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 8002114:	4013      	ands	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d021      	beq.n	8002168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002124:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	490e      	ldr	r1, [pc, #56]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
 8002130:	e021      	b.n	8002176 <HAL_GPIO_Init+0x2e2>
 8002132:	bf00      	nop
 8002134:	10320000 	.word	0x10320000
 8002138:	10310000 	.word	0x10310000
 800213c:	10220000 	.word	0x10220000
 8002140:	10210000 	.word	0x10210000
 8002144:	10120000 	.word	0x10120000
 8002148:	10110000 	.word	0x10110000
 800214c:	40021000 	.word	0x40021000
 8002150:	40010000 	.word	0x40010000
 8002154:	40010800 	.word	0x40010800
 8002158:	40010c00 	.word	0x40010c00
 800215c:	40011000 	.word	0x40011000
 8002160:	40011400 	.word	0x40011400
 8002164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_GPIO_Init+0x304>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	43db      	mvns	r3, r3
 8002170:	4909      	ldr	r1, [pc, #36]	@ (8002198 <HAL_GPIO_Init+0x304>)
 8002172:	4013      	ands	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	3301      	adds	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	f47f ae8e 	bne.w	8001ea8 <HAL_GPIO_Init+0x14>
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	372c      	adds	r7, #44	@ 0x2c
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e001      	b.n	80021be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	807b      	strh	r3, [r7, #2]
 80021d6:	4613      	mov	r3, r2
 80021d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021da:	787b      	ldrb	r3, [r7, #1]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e6:	e003      	b.n	80021f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	041a      	lsls	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e12b      	b.n	8002466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fa54 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	@ 0x24
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800224e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800225e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002260:	f001 fbec 	bl	8003a3c <HAL_RCC_GetPCLK1Freq>
 8002264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a81      	ldr	r2, [pc, #516]	@ (8002470 <HAL_I2C_Init+0x274>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d807      	bhi.n	8002280 <HAL_I2C_Init+0x84>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a80      	ldr	r2, [pc, #512]	@ (8002474 <HAL_I2C_Init+0x278>)
 8002274:	4293      	cmp	r3, r2
 8002276:	bf94      	ite	ls
 8002278:	2301      	movls	r3, #1
 800227a:	2300      	movhi	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e006      	b.n	800228e <HAL_I2C_Init+0x92>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a7d      	ldr	r2, [pc, #500]	@ (8002478 <HAL_I2C_Init+0x27c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0e7      	b.n	8002466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a78      	ldr	r2, [pc, #480]	@ (800247c <HAL_I2C_Init+0x280>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002470 <HAL_I2C_Init+0x274>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d802      	bhi.n	80022d0 <HAL_I2C_Init+0xd4>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	e009      	b.n	80022e4 <HAL_I2C_Init+0xe8>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	4a69      	ldr	r2, [pc, #420]	@ (8002480 <HAL_I2C_Init+0x284>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	3301      	adds	r3, #1
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	495c      	ldr	r1, [pc, #368]	@ (8002470 <HAL_I2C_Init+0x274>)
 8002300:	428b      	cmp	r3, r1
 8002302:	d819      	bhi.n	8002338 <HAL_I2C_Init+0x13c>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e59      	subs	r1, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002318:	400b      	ands	r3, r1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_I2C_Init+0x138>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e59      	subs	r1, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fbb1 f3f3 	udiv	r3, r1, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002332:	e051      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002334:	2304      	movs	r3, #4
 8002336:	e04f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d111      	bne.n	8002364 <HAL_I2C_Init+0x168>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e012      	b.n	800238a <HAL_I2C_Init+0x18e>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e58      	subs	r0, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	0099      	lsls	r1, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Init+0x196>
 800238e:	2301      	movs	r3, #1
 8002390:	e022      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10e      	bne.n	80023b8 <HAL_I2C_Init+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1e58      	subs	r0, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	440b      	add	r3, r1
 80023a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023b6:	e00f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	0099      	lsls	r1, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	6809      	ldr	r1, [r1, #0]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002406:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6911      	ldr	r1, [r2, #16]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	4311      	orrs	r1, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	430b      	orrs	r3, r1
 800241a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	000186a0 	.word	0x000186a0
 8002474:	001e847f 	.word	0x001e847f
 8002478:	003d08ff 	.word	0x003d08ff
 800247c:	431bde83 	.word	0x431bde83
 8002480:	10624dd3 	.word	0x10624dd3

08002484 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	460b      	mov	r3, r1
 8002492:	817b      	strh	r3, [r7, #10]
 8002494:	4613      	mov	r3, r2
 8002496:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff fb60 	bl	8001b5c <HAL_GetTick>
 800249c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	f040 80e0 	bne.w	800266c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2319      	movs	r3, #25
 80024b2:	2201      	movs	r2, #1
 80024b4:	4970      	ldr	r1, [pc, #448]	@ (8002678 <HAL_I2C_Master_Transmit+0x1f4>)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fcc0 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
 80024c4:	e0d3      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_I2C_Master_Transmit+0x50>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0cc      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d007      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002508:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2221      	movs	r2, #33	@ 0x21
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2210      	movs	r2, #16
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4a50      	ldr	r2, [pc, #320]	@ (800267c <HAL_I2C_Master_Transmit+0x1f8>)
 800253a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800253c:	8979      	ldrh	r1, [r7, #10]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fb10 	bl	8002b68 <I2C_MasterRequestWrite>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e08d      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002568:	e066      	b.n	8002638 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fd7e 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	2b04      	cmp	r3, #4
 8002580:	d107      	bne.n	8002592 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002590:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06b      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d11b      	bne.n	800260c <HAL_I2C_Master_Transmit+0x188>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d017      	beq.n	800260c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	6a39      	ldr	r1, [r7, #32]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fd75 	bl	8003100 <I2C_WaitOnBTFFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	2b04      	cmp	r3, #4
 8002622:	d107      	bne.n	8002634 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002632:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e01a      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d194      	bne.n	800256a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800264e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	00100002 	.word	0x00100002
 800267c:	ffff0000 	.word	0xffff0000

08002680 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	@ 0x30
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	4608      	mov	r0, r1
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	4603      	mov	r3, r0
 8002690:	817b      	strh	r3, [r7, #10]
 8002692:	460b      	mov	r3, r1
 8002694:	813b      	strh	r3, [r7, #8]
 8002696:	4613      	mov	r3, r2
 8002698:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800269e:	f7ff fa5d 	bl	8001b5c <HAL_GetTick>
 80026a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	f040 8250 	bne.w	8002b52 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2319      	movs	r3, #25
 80026b8:	2201      	movs	r2, #1
 80026ba:	4982      	ldr	r1, [pc, #520]	@ (80028c4 <HAL_I2C_Mem_Read+0x244>)
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fbbd 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
 80026ca:	e243      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_I2C_Mem_Read+0x5a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e23c      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4d4>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d007      	beq.n	8002700 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800270e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2222      	movs	r2, #34	@ 0x22
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2240      	movs	r2, #64	@ 0x40
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002730:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a62      	ldr	r2, [pc, #392]	@ (80028c8 <HAL_I2C_Mem_Read+0x248>)
 8002740:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002742:	88f8      	ldrh	r0, [r7, #6]
 8002744:	893a      	ldrh	r2, [r7, #8]
 8002746:	8979      	ldrh	r1, [r7, #10]
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4603      	mov	r3, r0
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa8a 	bl	8002c6c <I2C_RequestMemoryRead>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e1f8      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	d113      	bne.n	8002792 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e1cc      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002796:	2b01      	cmp	r3, #1
 8002798:	d11e      	bne.n	80027d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027aa:	b672      	cpsid	i
}
 80027ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027d4:	b662      	cpsie	i
}
 80027d6:	e035      	b.n	8002844 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d11e      	bne.n	800281e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027f0:	b672      	cpsid	i
}
 80027f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002818:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800281a:	b662      	cpsie	i
}
 800281c:	e012      	b.n	8002844 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800282c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002844:	e172      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284a:	2b03      	cmp	r3, #3
 800284c:	f200 811f 	bhi.w	8002a8e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002854:	2b01      	cmp	r3, #1
 8002856:	d123      	bne.n	80028a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800285a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fc97 	bl	8003190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e173      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800289e:	e145      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d152      	bne.n	800294e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ae:	2200      	movs	r2, #0
 80028b0:	4906      	ldr	r1, [pc, #24]	@ (80028cc <HAL_I2C_Mem_Read+0x24c>)
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fac2 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e148      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4d4>
 80028c2:	bf00      	nop
 80028c4:	00100002 	.word	0x00100002
 80028c8:	ffff0000 	.word	0xffff0000
 80028cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028d0:	b672      	cpsid	i
}
 80028d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002916:	b662      	cpsie	i
}
 8002918:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800294c:	e0ee      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002954:	2200      	movs	r2, #0
 8002956:	4981      	ldr	r1, [pc, #516]	@ (8002b5c <HAL_I2C_Mem_Read+0x4dc>)
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fa6f 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0f5      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002976:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002978:	b672      	cpsid	i
}
 800297a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002b60 <HAL_I2C_Mem_Read+0x4e0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b64 <HAL_I2C_Mem_Read+0x4e4>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0a1a      	lsrs	r2, r3, #8
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00da      	lsls	r2, r3, #3
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d118      	bne.n	8002a06 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f043 0220 	orr.w	r2, r3, #32
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80029f6:	b662      	cpsie	i
}
 80029f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0a6      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d1d9      	bne.n	80029c8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a56:	b662      	cpsie	i
}
 8002a58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a8c:	e04e      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fb7c 	bl	8003190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e058      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d124      	bne.n	8002b2c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d107      	bne.n	8002afa <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f47f ae88 	bne.w	8002846 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3728      	adds	r7, #40	@ 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	00010004 	.word	0x00010004
 8002b60:	20000004 	.word	0x20000004
 8002b64:	14f8b589 	.word	0x14f8b589

08002b68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d006      	beq.n	8002b92 <I2C_MasterRequestWrite+0x2a>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d003      	beq.n	8002b92 <I2C_MasterRequestWrite+0x2a>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b90:	d108      	bne.n	8002ba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e00b      	b.n	8002bbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d107      	bne.n	8002bbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f937 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be2:	d103      	bne.n	8002bec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e035      	b.n	8002c5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bf8:	d108      	bne.n	8002c0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bfa:	897b      	ldrh	r3, [r7, #10]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	e01b      	b.n	8002c44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c0c:	897b      	ldrh	r3, [r7, #10]
 8002c0e:	11db      	asrs	r3, r3, #7
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 0306 	and.w	r3, r3, #6
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f063 030f 	orn	r3, r3, #15
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	490e      	ldr	r1, [pc, #56]	@ (8002c64 <I2C_MasterRequestWrite+0xfc>)
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f980 	bl	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e010      	b.n	8002c5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4907      	ldr	r1, [pc, #28]	@ (8002c68 <I2C_MasterRequestWrite+0x100>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f970 	bl	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	00010008 	.word	0x00010008
 8002c68:	00010002 	.word	0x00010002

08002c6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	4608      	mov	r0, r1
 8002c76:	4611      	mov	r1, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	813b      	strh	r3, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f8c2 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ccc:	d103      	bne.n	8002cd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0aa      	b.n	8002e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cda:	897b      	ldrh	r3, [r7, #10]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ce8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	4952      	ldr	r1, [pc, #328]	@ (8002e38 <I2C_RequestMemoryRead+0x1cc>)
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f91d 	bl	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e097      	b.n	8002e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d18:	6a39      	ldr	r1, [r7, #32]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f9a8 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d107      	bne.n	8002d3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e076      	b.n	8002e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d48:	893b      	ldrh	r3, [r7, #8]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	611a      	str	r2, [r3, #16]
 8002d52:	e021      	b.n	8002d98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d54:	893b      	ldrh	r3, [r7, #8]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d64:	6a39      	ldr	r1, [r7, #32]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f982 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d107      	bne.n	8002d8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e050      	b.n	8002e30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8e:	893b      	ldrh	r3, [r7, #8]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9a:	6a39      	ldr	r1, [r7, #32]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f967 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d107      	bne.n	8002dc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e035      	b.n	8002e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f82b 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dfa:	d103      	bne.n	8002e04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e013      	b.n	8002e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e08:	897b      	ldrh	r3, [r7, #10]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	6a3a      	ldr	r2, [r7, #32]
 8002e1c:	4906      	ldr	r1, [pc, #24]	@ (8002e38 <I2C_RequestMemoryRead+0x1cc>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f886 	bl	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	00010002 	.word	0x00010002

08002e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4c:	e048      	b.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d044      	beq.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7fe fe81 	bl	8001b5c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d139      	bne.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	0c1b      	lsrs	r3, r3, #16
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10d      	bne.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4013      	ands	r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	e00c      	b.n	8002eac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d116      	bne.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e023      	b.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10d      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	e00c      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d093      	beq.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f3e:	e071      	b.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f4e:	d123      	bne.n	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	f043 0204 	orr.w	r2, r3, #4
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e067      	b.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d041      	beq.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa0:	f7fe fddc 	bl	8001b5c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d302      	bcc.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d136      	bne.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10c      	bne.n	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	e00b      	b.n	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d016      	beq.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e021      	b.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10c      	bne.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e00b      	b.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	43da      	mvns	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4013      	ands	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	f47f af6d 	bne.w	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307c:	e034      	b.n	80030e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f8e3 	bl	800324a <I2C_IsAcknowledgeFailed>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e034      	b.n	80030f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d028      	beq.n	80030e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7fe fd61 	bl	8001b5c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d11d      	bne.n	80030e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b6:	2b80      	cmp	r3, #128	@ 0x80
 80030b8:	d016      	beq.n	80030e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e007      	b.n	80030f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f2:	2b80      	cmp	r3, #128	@ 0x80
 80030f4:	d1c3      	bne.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800310c:	e034      	b.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f89b 	bl	800324a <I2C_IsAcknowledgeFailed>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e034      	b.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d028      	beq.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7fe fd19 	bl	8001b5c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11d      	bne.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b04      	cmp	r3, #4
 8003148:	d016      	beq.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e007      	b.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b04      	cmp	r3, #4
 8003184:	d1c3      	bne.n	800310e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800319c:	e049      	b.n	8003232 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d119      	bne.n	80031e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0210 	mvn.w	r2, #16
 80031b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e030      	b.n	8003242 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7fe fcbc 	bl	8001b5c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d11d      	bne.n	8003232 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003200:	2b40      	cmp	r3, #64	@ 0x40
 8003202:	d016      	beq.n	8003232 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e007      	b.n	8003242 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b40      	cmp	r3, #64	@ 0x40
 800323e:	d1ae      	bne.n	800319e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003260:	d11b      	bne.n	800329a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800326a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e272      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8087 	beq.w	80033d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c8:	4b92      	ldr	r3, [pc, #584]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d00c      	beq.n	80032ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d112      	bne.n	8003306 <HAL_RCC_OscConfig+0x5e>
 80032e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ec:	d10b      	bne.n	8003306 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ee:	4b89      	ldr	r3, [pc, #548]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d06c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x12c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d168      	bne.n	80033d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e24c      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x76>
 8003310:	4b80      	ldr	r3, [pc, #512]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a7f      	ldr	r2, [pc, #508]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e02e      	b.n	800337c <HAL_RCC_OscConfig+0xd4>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x98>
 8003326:	4b7b      	ldr	r3, [pc, #492]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a7a      	ldr	r2, [pc, #488]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 800332c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b78      	ldr	r3, [pc, #480]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a77      	ldr	r2, [pc, #476]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003338:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e01d      	b.n	800337c <HAL_RCC_OscConfig+0xd4>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0xbc>
 800334a:	4b72      	ldr	r3, [pc, #456]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a71      	ldr	r2, [pc, #452]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b6f      	ldr	r3, [pc, #444]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a6e      	ldr	r2, [pc, #440]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0xd4>
 8003364:	4b6b      	ldr	r3, [pc, #428]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6a      	ldr	r2, [pc, #424]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b68      	ldr	r3, [pc, #416]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a67      	ldr	r2, [pc, #412]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800337a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fe fbea 	bl	8001b5c <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7fe fbe6 	bl	8001b5c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	@ 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e200      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b5d      	ldr	r3, [pc, #372]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0xe4>
 80033aa:	e014      	b.n	80033d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe fbd6 	bl	8001b5c <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe fbd2 	bl	8001b5c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1ec      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c6:	4b53      	ldr	r3, [pc, #332]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x10c>
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d063      	beq.n	80034aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ee:	4b49      	ldr	r3, [pc, #292]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d11c      	bne.n	8003434 <HAL_RCC_OscConfig+0x18c>
 80033fa:	4b46      	ldr	r3, [pc, #280]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d116      	bne.n	8003434 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	4b43      	ldr	r3, [pc, #268]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x176>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e1c0      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b3d      	ldr	r3, [pc, #244]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4939      	ldr	r1, [pc, #228]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	e03a      	b.n	80034aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800343c:	4b36      	ldr	r3, [pc, #216]	@ (8003518 <HAL_RCC_OscConfig+0x270>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe fb8b 	bl	8001b5c <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344a:	f7fe fb87 	bl	8001b5c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1a1      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345c:	4b2d      	ldr	r3, [pc, #180]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	4b2a      	ldr	r3, [pc, #168]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4927      	ldr	r1, [pc, #156]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
 800347c:	e015      	b.n	80034aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347e:	4b26      	ldr	r3, [pc, #152]	@ (8003518 <HAL_RCC_OscConfig+0x270>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fb6a 	bl	8001b5c <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348c:	f7fe fb66 	bl	8001b5c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e180      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d03a      	beq.n	800352c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d019      	beq.n	80034f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034be:	4b17      	ldr	r3, [pc, #92]	@ (800351c <HAL_RCC_OscConfig+0x274>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c4:	f7fe fb4a 	bl	8001b5c <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034cc:	f7fe fb46 	bl	8001b5c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e160      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034de:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ea:	2001      	movs	r0, #1
 80034ec:	f000 fafe 	bl	8003aec <RCC_Delay>
 80034f0:	e01c      	b.n	800352c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f2:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_RCC_OscConfig+0x274>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f8:	f7fe fb30 	bl	8001b5c <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fe:	e00f      	b.n	8003520 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fe fb2c 	bl	8001b5c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d908      	bls.n	8003520 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e146      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	42420000 	.word	0x42420000
 800351c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	4b92      	ldr	r3, [pc, #584]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e9      	bne.n	8003500 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a6 	beq.w	8003686 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353e:	4b8b      	ldr	r3, [pc, #556]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10d      	bne.n	8003566 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	4b88      	ldr	r3, [pc, #544]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4a87      	ldr	r2, [pc, #540]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003554:	61d3      	str	r3, [r2, #28]
 8003556:	4b85      	ldr	r3, [pc, #532]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003566:	4b82      	ldr	r3, [pc, #520]	@ (8003770 <HAL_RCC_OscConfig+0x4c8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d118      	bne.n	80035a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003572:	4b7f      	ldr	r3, [pc, #508]	@ (8003770 <HAL_RCC_OscConfig+0x4c8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7e      	ldr	r2, [pc, #504]	@ (8003770 <HAL_RCC_OscConfig+0x4c8>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800357c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357e:	f7fe faed 	bl	8001b5c <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fe fae9 	bl	8001b5c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	@ 0x64
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e103      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	4b75      	ldr	r3, [pc, #468]	@ (8003770 <HAL_RCC_OscConfig+0x4c8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x312>
 80035ac:	4b6f      	ldr	r3, [pc, #444]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a6e      	ldr	r2, [pc, #440]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6213      	str	r3, [r2, #32]
 80035b8:	e02d      	b.n	8003616 <HAL_RCC_OscConfig+0x36e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x334>
 80035c2:	4b6a      	ldr	r3, [pc, #424]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a69      	ldr	r2, [pc, #420]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	6213      	str	r3, [r2, #32]
 80035ce:	4b67      	ldr	r3, [pc, #412]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4a66      	ldr	r2, [pc, #408]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	f023 0304 	bic.w	r3, r3, #4
 80035d8:	6213      	str	r3, [r2, #32]
 80035da:	e01c      	b.n	8003616 <HAL_RCC_OscConfig+0x36e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d10c      	bne.n	80035fe <HAL_RCC_OscConfig+0x356>
 80035e4:	4b61      	ldr	r3, [pc, #388]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4a60      	ldr	r2, [pc, #384]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	6213      	str	r3, [r2, #32]
 80035f0:	4b5e      	ldr	r3, [pc, #376]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4a5d      	ldr	r2, [pc, #372]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6213      	str	r3, [r2, #32]
 80035fc:	e00b      	b.n	8003616 <HAL_RCC_OscConfig+0x36e>
 80035fe:	4b5b      	ldr	r3, [pc, #364]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a5a      	ldr	r2, [pc, #360]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	4b58      	ldr	r3, [pc, #352]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a57      	ldr	r2, [pc, #348]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d015      	beq.n	800364a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe fa9d 	bl	8001b5c <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fe fa99 	bl	8001b5c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0b1      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363c:	4b4b      	ldr	r3, [pc, #300]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0ee      	beq.n	8003626 <HAL_RCC_OscConfig+0x37e>
 8003648:	e014      	b.n	8003674 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364a:	f7fe fa87 	bl	8001b5c <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe fa83 	bl	8001b5c <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e09b      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003668:	4b40      	ldr	r3, [pc, #256]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ee      	bne.n	8003652 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367a:	4b3c      	ldr	r3, [pc, #240]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	4a3b      	ldr	r2, [pc, #236]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003684:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8087 	beq.w	800379e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003690:	4b36      	ldr	r3, [pc, #216]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d061      	beq.n	8003760 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d146      	bne.n	8003732 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b33      	ldr	r3, [pc, #204]	@ (8003774 <HAL_RCC_OscConfig+0x4cc>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe fa57 	bl	8001b5c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe fa53 	bl	8001b5c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e06d      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c4:	4b29      	ldr	r3, [pc, #164]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d8:	d108      	bne.n	80036ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036da:	4b24      	ldr	r3, [pc, #144]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	4921      	ldr	r1, [pc, #132]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ec:	4b1f      	ldr	r3, [pc, #124]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a19      	ldr	r1, [r3, #32]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	430b      	orrs	r3, r1
 80036fe:	491b      	ldr	r1, [pc, #108]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003704:	4b1b      	ldr	r3, [pc, #108]	@ (8003774 <HAL_RCC_OscConfig+0x4cc>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe fa27 	bl	8001b5c <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe fa23 	bl	8001b5c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e03d      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003724:	4b11      	ldr	r3, [pc, #68]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x46a>
 8003730:	e035      	b.n	800379e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fe fa10 	bl	8001b5c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe fa0c 	bl	8001b5c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e026      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003752:	4b06      	ldr	r3, [pc, #24]	@ (800376c <HAL_RCC_OscConfig+0x4c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x498>
 800375e:	e01e      	b.n	800379e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e019      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
 800376c:	40021000 	.word	0x40021000
 8003770:	40007000 	.word	0x40007000
 8003774:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003778:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <HAL_RCC_OscConfig+0x500>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	429a      	cmp	r2, r3
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000

080037ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0d0      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d910      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b67      	ldr	r3, [pc, #412]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 0207 	bic.w	r2, r3, #7
 80037d6:	4965      	ldr	r1, [pc, #404]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b63      	ldr	r3, [pc, #396]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0b8      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003808:	4b59      	ldr	r3, [pc, #356]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a58      	ldr	r2, [pc, #352]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003812:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003820:	4b53      	ldr	r3, [pc, #332]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a52      	ldr	r2, [pc, #328]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800382a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b50      	ldr	r3, [pc, #320]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	494d      	ldr	r1, [pc, #308]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d040      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b47      	ldr	r3, [pc, #284]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d115      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b41      	ldr	r3, [pc, #260]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e073      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	4b3d      	ldr	r3, [pc, #244]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06b      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388a:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4936      	ldr	r1, [pc, #216]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800389c:	f7fe f95e 	bl	8001b5c <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fe f95a 	bl	8001b5c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e053      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b27      	ldr	r3, [pc, #156]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d210      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b24      	ldr	r3, [pc, #144]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	4922      	ldr	r1, [pc, #136]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b20      	ldr	r3, [pc, #128]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e032      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b19      	ldr	r3, [pc, #100]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4916      	ldr	r1, [pc, #88]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003926:	4b12      	ldr	r3, [pc, #72]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	490e      	ldr	r1, [pc, #56]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800393a:	f000 f821 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800393e:	4602      	mov	r2, r0
 8003940:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	490a      	ldr	r1, [pc, #40]	@ (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	5ccb      	ldrb	r3, [r1, r3]
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <HAL_RCC_ClockConfig+0x1cc>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <HAL_RCC_ClockConfig+0x1d0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd ffca 	bl	80018f4 <HAL_InitTick>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40022000 	.word	0x40022000
 8003970:	40021000 	.word	0x40021000
 8003974:	08007538 	.word	0x08007538
 8003978:	20000004 	.word	0x20000004
 800397c:	20000008 	.word	0x20000008

08003980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800399a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x94>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d002      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x30>
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x36>
 80039ae:	e027      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b0:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80039b2:	613b      	str	r3, [r7, #16]
      break;
 80039b4:	e027      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	0c9b      	lsrs	r3, r3, #18
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	4a17      	ldr	r2, [pc, #92]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039c0:	5cd3      	ldrb	r3, [r2, r3]
 80039c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d010      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ce:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x94>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	0c5b      	lsrs	r3, r3, #17
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	4a11      	ldr	r2, [pc, #68]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039da:	5cd3      	ldrb	r3, [r2, r3]
 80039dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80039e2:	fb03 f202 	mul.w	r2, r3, r2
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e004      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	613b      	str	r3, [r7, #16]
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a02:	613b      	str	r3, [r7, #16]
      break;
 8003a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a06:	693b      	ldr	r3, [r7, #16]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	007a1200 	.word	0x007a1200
 8003a1c:	08007550 	.word	0x08007550
 8003a20:	08007560 	.word	0x08007560
 8003a24:	003d0900 	.word	0x003d0900

08003a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a2c:	4b02      	ldr	r3, [pc, #8]	@ (8003a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	20000004 	.word	0x20000004

08003a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a40:	f7ff fff2 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4903      	ldr	r1, [pc, #12]	@ (8003a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	08007548 	.word	0x08007548

08003a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a68:	f7ff ffde 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	0adb      	lsrs	r3, r3, #11
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4903      	ldr	r1, [pc, #12]	@ (8003a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	08007548 	.word	0x08007548

08003a8c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	220f      	movs	r2, #15
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <HAL_RCC_GetClockConfig+0x58>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0203 	and.w	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae4 <HAL_RCC_GetClockConfig+0x58>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_GetClockConfig+0x58>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ac0:	4b08      	ldr	r3, [pc, #32]	@ (8003ae4 <HAL_RCC_GetClockConfig+0x58>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	08db      	lsrs	r3, r3, #3
 8003ac6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0207 	and.w	r2, r3, #7
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40022000 	.word	0x40022000

08003aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003af4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <RCC_Delay+0x34>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <RCC_Delay+0x38>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0a5b      	lsrs	r3, r3, #9
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b08:	bf00      	nop
  }
  while (Delay --);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1e5a      	subs	r2, r3, #1
 8003b0e:	60fa      	str	r2, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f9      	bne.n	8003b08 <RCC_Delay+0x1c>
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	20000004 	.word	0x20000004
 8003b24:	10624dd3 	.word	0x10624dd3

08003b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e041      	b.n	8003bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd fdfc 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 fce2 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e032      	b.n	8003c46 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a18      	ldr	r2, [pc, #96]	@ (8003c50 <HAL_TIM_Base_Start+0x88>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00e      	beq.n	8003c10 <HAL_TIM_Base_Start+0x48>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfa:	d009      	beq.n	8003c10 <HAL_TIM_Base_Start+0x48>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a14      	ldr	r2, [pc, #80]	@ (8003c54 <HAL_TIM_Base_Start+0x8c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_TIM_Base_Start+0x48>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <HAL_TIM_Base_Start+0x90>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d111      	bne.n	8003c34 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d010      	beq.n	8003c44 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c32:	e007      	b.n	8003c44 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40000400 	.word	0x40000400
 8003c58:	40000800 	.word	0x40000800

08003c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d001      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e03a      	b.n	8003cea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a18      	ldr	r2, [pc, #96]	@ (8003cf4 <HAL_TIM_Base_Start_IT+0x98>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00e      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x58>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9e:	d009      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x58>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a14      	ldr	r2, [pc, #80]	@ (8003cf8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x58>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a13      	ldr	r2, [pc, #76]	@ (8003cfc <HAL_TIM_Base_Start_IT+0xa0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d111      	bne.n	8003cd8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d010      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd6:	e007      	b.n	8003ce8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800

08003d00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e041      	b.n	8003d96 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f839 	bl	8003d9e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f000 fbf6 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <HAL_TIM_IC_Start_IT+0x1e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	e013      	b.n	8003df6 <HAL_TIM_IC_Start_IT+0x46>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d104      	bne.n	8003dde <HAL_TIM_IC_Start_IT+0x2e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e00b      	b.n	8003df6 <HAL_TIM_IC_Start_IT+0x46>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d104      	bne.n	8003dee <HAL_TIM_IC_Start_IT+0x3e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	e003      	b.n	8003df6 <HAL_TIM_IC_Start_IT+0x46>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <HAL_TIM_IC_Start_IT+0x58>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e013      	b.n	8003e30 <HAL_TIM_IC_Start_IT+0x80>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d104      	bne.n	8003e18 <HAL_TIM_IC_Start_IT+0x68>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e00b      	b.n	8003e30 <HAL_TIM_IC_Start_IT+0x80>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d104      	bne.n	8003e28 <HAL_TIM_IC_Start_IT+0x78>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e003      	b.n	8003e30 <HAL_TIM_IC_Start_IT+0x80>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e32:	7bbb      	ldrb	r3, [r7, #14]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d102      	bne.n	8003e3e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e38:	7b7b      	ldrb	r3, [r7, #13]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0b8      	b.n	8003fb4 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_IC_Start_IT+0xa2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e50:	e013      	b.n	8003e7a <HAL_TIM_IC_Start_IT+0xca>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_IC_Start_IT+0xb2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e60:	e00b      	b.n	8003e7a <HAL_TIM_IC_Start_IT+0xca>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_IC_Start_IT+0xc2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e70:	e003      	b.n	8003e7a <HAL_TIM_IC_Start_IT+0xca>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_IC_Start_IT+0xda>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e88:	e013      	b.n	8003eb2 <HAL_TIM_IC_Start_IT+0x102>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_IC_Start_IT+0xea>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e98:	e00b      	b.n	8003eb2 <HAL_TIM_IC_Start_IT+0x102>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_IC_Start_IT+0xfa>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ea8:	e003      	b.n	8003eb2 <HAL_TIM_IC_Start_IT+0x102>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d841      	bhi.n	8003f3c <HAL_TIM_IC_Start_IT+0x18c>
 8003eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <HAL_TIM_IC_Start_IT+0x110>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003f3d 	.word	0x08003f3d
 8003ec8:	08003f3d 	.word	0x08003f3d
 8003ecc:	08003f3d 	.word	0x08003f3d
 8003ed0:	08003f07 	.word	0x08003f07
 8003ed4:	08003f3d 	.word	0x08003f3d
 8003ed8:	08003f3d 	.word	0x08003f3d
 8003edc:	08003f3d 	.word	0x08003f3d
 8003ee0:	08003f19 	.word	0x08003f19
 8003ee4:	08003f3d 	.word	0x08003f3d
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003f3d 	.word	0x08003f3d
 8003ef0:	08003f2b 	.word	0x08003f2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0202 	orr.w	r2, r2, #2
 8003f02:	60da      	str	r2, [r3, #12]
      break;
 8003f04:	e01d      	b.n	8003f42 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0204 	orr.w	r2, r2, #4
 8003f14:	60da      	str	r2, [r3, #12]
      break;
 8003f16:	e014      	b.n	8003f42 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0208 	orr.w	r2, r2, #8
 8003f26:	60da      	str	r2, [r3, #12]
      break;
 8003f28:	e00b      	b.n	8003f42 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0210 	orr.w	r2, r2, #16
 8003f38:	60da      	str	r2, [r3, #12]
      break;
 8003f3a:	e002      	b.n	8003f42 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f40:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d134      	bne.n	8003fb2 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fcfe 	bl	8004952 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a18      	ldr	r2, [pc, #96]	@ (8003fbc <HAL_TIM_IC_Start_IT+0x20c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_TIM_IC_Start_IT+0x1ce>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f68:	d009      	beq.n	8003f7e <HAL_TIM_IC_Start_IT+0x1ce>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a14      	ldr	r2, [pc, #80]	@ (8003fc0 <HAL_TIM_IC_Start_IT+0x210>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIM_IC_Start_IT+0x1ce>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a12      	ldr	r2, [pc, #72]	@ (8003fc4 <HAL_TIM_IC_Start_IT+0x214>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d111      	bne.n	8003fa2 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b06      	cmp	r3, #6
 8003f8e:	d010      	beq.n	8003fb2 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	e007      	b.n	8003fb2 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800

08003fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d020      	beq.n	800402c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01b      	beq.n	800402c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0202 	mvn.w	r2, #2
 8003ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fc fed8 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa6c 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa72 	bl	800450a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d020      	beq.n	8004078 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01b      	beq.n	8004078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0204 	mvn.w	r2, #4
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fc feb2 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fa46 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fa4c 	bl	800450a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d020      	beq.n	80040c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01b      	beq.n	80040c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0208 	mvn.w	r2, #8
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2204      	movs	r2, #4
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc fe8c 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa20 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fa26 	bl	800450a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d020      	beq.n	8004110 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01b      	beq.n	8004110 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0210 	mvn.w	r2, #16
 80040e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2208      	movs	r2, #8
 80040e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc fe66 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9fa 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fa00 	bl	800450a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00c      	beq.n	8004134 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0201 	mvn.w	r2, #1
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd fa7e 	bl	8001630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00c      	beq.n	8004158 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fc89 	bl	8004a6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00c      	beq.n	800417c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9d0 	bl	800451c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0220 	mvn.w	r2, #32
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fc5c 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e088      	b.n	80042d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80041e4:	f000 fa12 	bl	800460c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 020c 	bic.w	r2, r2, #12
 80041f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6999      	ldr	r1, [r3, #24]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	619a      	str	r2, [r3, #24]
 800420a:	e060      	b.n	80042ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b04      	cmp	r3, #4
 8004210:	d11c      	bne.n	800424c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004222:	f000 fa7b 	bl	800471c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004234:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6999      	ldr	r1, [r3, #24]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	021a      	lsls	r2, r3, #8
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	619a      	str	r2, [r3, #24]
 800424a:	e040      	b.n	80042ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b08      	cmp	r3, #8
 8004250:	d11b      	bne.n	800428a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004262:	f000 fac6 	bl	80047f2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 020c 	bic.w	r2, r2, #12
 8004274:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69d9      	ldr	r1, [r3, #28]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	61da      	str	r2, [r3, #28]
 8004288:	e021      	b.n	80042ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d11c      	bne.n	80042ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80042a0:	f000 fae2 	bl	8004868 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69d9      	ldr	r1, [r3, #28]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	021a      	lsls	r2, r3, #8
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	61da      	str	r2, [r3, #28]
 80042c8:	e001      	b.n	80042ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_ConfigClockSource+0x1c>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0b4      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x186>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800431a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004334:	d03e      	beq.n	80043b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800433a:	f200 8087 	bhi.w	800444c <HAL_TIM_ConfigClockSource+0x16c>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004342:	f000 8086 	beq.w	8004452 <HAL_TIM_ConfigClockSource+0x172>
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434a:	d87f      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b70      	cmp	r3, #112	@ 0x70
 800434e:	d01a      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0xa6>
 8004350:	2b70      	cmp	r3, #112	@ 0x70
 8004352:	d87b      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b60      	cmp	r3, #96	@ 0x60
 8004356:	d050      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x11a>
 8004358:	2b60      	cmp	r3, #96	@ 0x60
 800435a:	d877      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b50      	cmp	r3, #80	@ 0x50
 800435e:	d03c      	beq.n	80043da <HAL_TIM_ConfigClockSource+0xfa>
 8004360:	2b50      	cmp	r3, #80	@ 0x50
 8004362:	d873      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b40      	cmp	r3, #64	@ 0x40
 8004366:	d058      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x13a>
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d86f      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b30      	cmp	r3, #48	@ 0x30
 800436e:	d064      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b30      	cmp	r3, #48	@ 0x30
 8004372:	d86b      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d060      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x15a>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d867      	bhi.n	800444c <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d05c      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x15a>
 8004380:	2b10      	cmp	r3, #16
 8004382:	d05a      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x15a>
 8004384:	e062      	b.n	800444c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004396:	f000 fabd 	bl	8004914 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	609a      	str	r2, [r3, #8]
      break;
 80043b2:	e04f      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043c4:	f000 faa6 	bl	8004914 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043d6:	609a      	str	r2, [r3, #8]
      break;
 80043d8:	e03c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 f96a 	bl	80046c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2150      	movs	r1, #80	@ 0x50
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fa74 	bl	80048e0 <TIM_ITRx_SetConfig>
      break;
 80043f8:	e02c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004406:	461a      	mov	r2, r3
 8004408:	f000 f9c4 	bl	8004794 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2160      	movs	r1, #96	@ 0x60
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa64 	bl	80048e0 <TIM_ITRx_SetConfig>
      break;
 8004418:	e01c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004426:	461a      	mov	r2, r3
 8004428:	f000 f94a 	bl	80046c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2140      	movs	r1, #64	@ 0x40
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fa54 	bl	80048e0 <TIM_ITRx_SetConfig>
      break;
 8004438:	e00c      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f000 fa4b 	bl	80048e0 <TIM_ITRx_SetConfig>
      break;
 800444a:	e003      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      break;
 8004450:	e000      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d831      	bhi.n	80044e8 <HAL_TIM_ReadCapturedValue+0x78>
 8004484:	a201      	add	r2, pc, #4	@ (adr r2, 800448c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	080044c1 	.word	0x080044c1
 8004490:	080044e9 	.word	0x080044e9
 8004494:	080044e9 	.word	0x080044e9
 8004498:	080044e9 	.word	0x080044e9
 800449c:	080044cb 	.word	0x080044cb
 80044a0:	080044e9 	.word	0x080044e9
 80044a4:	080044e9 	.word	0x080044e9
 80044a8:	080044e9 	.word	0x080044e9
 80044ac:	080044d5 	.word	0x080044d5
 80044b0:	080044e9 	.word	0x080044e9
 80044b4:	080044e9 	.word	0x080044e9
 80044b8:	080044e9 	.word	0x080044e9
 80044bc:	080044df 	.word	0x080044df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c6:	60fb      	str	r3, [r7, #12]

      break;
 80044c8:	e00f      	b.n	80044ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	60fb      	str	r3, [r7, #12]

      break;
 80044d2:	e00a      	b.n	80044ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044da:	60fb      	str	r3, [r7, #12]

      break;
 80044dc:	e005      	b.n	80044ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	60fb      	str	r3, [r7, #12]

      break;
 80044e6:	e000      	b.n	80044ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80044e8:	bf00      	nop
  }

  return tmpreg;
 80044ea:	68fb      	ldr	r3, [r7, #12]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop

080044f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
	...

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a2f      	ldr	r2, [pc, #188]	@ (8004600 <TIM_Base_SetConfig+0xd0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00b      	beq.n	8004560 <TIM_Base_SetConfig+0x30>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454e:	d007      	beq.n	8004560 <TIM_Base_SetConfig+0x30>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a2c      	ldr	r2, [pc, #176]	@ (8004604 <TIM_Base_SetConfig+0xd4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_Base_SetConfig+0x30>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a2b      	ldr	r2, [pc, #172]	@ (8004608 <TIM_Base_SetConfig+0xd8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d108      	bne.n	8004572 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a22      	ldr	r2, [pc, #136]	@ (8004600 <TIM_Base_SetConfig+0xd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00b      	beq.n	8004592 <TIM_Base_SetConfig+0x62>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004580:	d007      	beq.n	8004592 <TIM_Base_SetConfig+0x62>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a1f      	ldr	r2, [pc, #124]	@ (8004604 <TIM_Base_SetConfig+0xd4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_Base_SetConfig+0x62>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <TIM_Base_SetConfig+0xd8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d108      	bne.n	80045a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004600 <TIM_Base_SetConfig+0xd0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d103      	bne.n	80045d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f023 0201 	bic.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	611a      	str	r2, [r3, #16]
  }
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800

0800460c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f023 0201 	bic.w	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a1f      	ldr	r2, [pc, #124]	@ (80046b4 <TIM_TI1_SetConfig+0xa8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00b      	beq.n	8004652 <TIM_TI1_SetConfig+0x46>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004640:	d007      	beq.n	8004652 <TIM_TI1_SetConfig+0x46>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4a1c      	ldr	r2, [pc, #112]	@ (80046b8 <TIM_TI1_SetConfig+0xac>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d003      	beq.n	8004652 <TIM_TI1_SetConfig+0x46>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <TIM_TI1_SetConfig+0xb0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <TIM_TI1_SetConfig+0x4a>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <TIM_TI1_SetConfig+0x4c>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0303 	bic.w	r3, r3, #3
 8004662:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e003      	b.n	8004676 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800467c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	b2db      	uxtb	r3, r3
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f023 030a 	bic.w	r3, r3, #10
 8004690:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f003 030a 	and.w	r3, r3, #10
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800

080046c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f023 0201 	bic.w	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 030a 	bic.w	r3, r3, #10
 80046fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr

0800471c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f023 0210 	bic.w	r2, r3, #16
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800475a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	031b      	lsls	r3, r3, #12
 8004760:	b29b      	uxth	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800476e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0210 	bic.w	r2, r3, #16
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	031b      	lsls	r3, r3, #12
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	621a      	str	r2, [r3, #32]
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b087      	sub	sp, #28
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800482e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	b2db      	uxtb	r3, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004842:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004894:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	031b      	lsls	r3, r3, #12
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	031b      	lsls	r3, r3, #12
 80048c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f043 0307 	orr.w	r3, r3, #7
 8004902:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	609a      	str	r2, [r3, #8]
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800492e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	021a      	lsls	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	431a      	orrs	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4313      	orrs	r3, r2
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004952:	b480      	push	{r7}
 8004954:	b087      	sub	sp, #28
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2201      	movs	r2, #1
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1a      	ldr	r2, [r3, #32]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	43db      	mvns	r3, r3
 8004974:	401a      	ands	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1a      	ldr	r2, [r3, #32]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	431a      	orrs	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	621a      	str	r2, [r3, #32]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr
	...

0800499c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e046      	b.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a16      	ldr	r2, [pc, #88]	@ (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00e      	beq.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a00:	d009      	beq.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a12      	ldr	r2, [pc, #72]	@ (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a10      	ldr	r2, [pc, #64]	@ (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d10c      	bne.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800

08004a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e042      	b.n	8004b14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc fed2 	bl	800184c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	@ 0x24
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fd09 	bl	80054d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d121      	bne.n	8004b7a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_UART_Transmit_IT+0x26>
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e01a      	b.n	8004b7c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	88fa      	ldrh	r2, [r7, #6]
 8004b56:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2221      	movs	r2, #33	@ 0x21
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e000      	b.n	8004b7c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
  }
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	4613      	mov	r3, r2
 8004b92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d112      	bne.n	8004bc6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_UART_Receive_IT+0x26>
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e00b      	b.n	8004bc8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fab6 	bl	800512e <UART_Start_Receive_IT>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	e000      	b.n	8004bc8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004bc6:	2302      	movs	r3, #2
  }
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0ba      	sub	sp, #232	@ 0xe8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_UART_IRQHandler+0x66>
 8004c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fb93 	bl	800535a <UART_Receive_IT>
      return;
 8004c34:	e25b      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80de 	beq.w	8004dfc <HAL_UART_IRQHandler+0x22c>
 8004c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80d1 	beq.w	8004dfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <HAL_UART_IRQHandler+0xae>
 8004c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c76:	f043 0201 	orr.w	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xd2>
 8004c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9a:	f043 0202 	orr.w	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xf6>
 8004cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d011      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x126>
 8004cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d105      	bne.n	8004cea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cee:	f043 0208 	orr.w	r2, r3, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 81f2 	beq.w	80050e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <HAL_UART_IRQHandler+0x14e>
 8004d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fb1e 	bl	800535a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <HAL_UART_IRQHandler+0x17a>
 8004d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d04f      	beq.n	8004dea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fa28 	bl	80051a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d041      	beq.n	8004de2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3314      	adds	r3, #20
 8004d64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3314      	adds	r3, #20
 8004d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1d9      	bne.n	8004d5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d013      	beq.n	8004dda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db6:	4a7e      	ldr	r2, [pc, #504]	@ (8004fb0 <HAL_UART_IRQHandler+0x3e0>)
 8004db8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fc fff0 	bl	8001da4 <HAL_DMA_Abort_IT>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d016      	beq.n	8004df8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	e00e      	b.n	8004df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f993 	bl	8005106 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	e00a      	b.n	8004df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f98f 	bl	8005106 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	e006      	b.n	8004df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f98b 	bl	8005106 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004df6:	e175      	b.n	80050e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	bf00      	nop
    return;
 8004dfa:	e173      	b.n	80050e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 814f 	bne.w	80050a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8148 	beq.w	80050a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8141 	beq.w	80050a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80b6 	beq.w	8004fb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8145 	beq.w	80050e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e66:	429a      	cmp	r2, r3
 8004e68:	f080 813e 	bcs.w	80050e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	f000 8088 	beq.w	8004f90 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004eac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004eb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1d9      	bne.n	8004e80 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3314      	adds	r3, #20
 8004ed2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004edc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3314      	adds	r3, #20
 8004eec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ef0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ef8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e1      	bne.n	8004ecc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3314      	adds	r3, #20
 8004f28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e3      	bne.n	8004f08 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f60:	f023 0310 	bic.w	r3, r3, #16
 8004f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f74:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e3      	bne.n	8004f4e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fc fecf 	bl	8001d2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8b6 	bl	8005118 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fac:	e09c      	b.n	80050e8 <HAL_UART_IRQHandler+0x518>
 8004fae:	bf00      	nop
 8004fb0:	08005265 	.word	0x08005265
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 808e 	beq.w	80050ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8089 	beq.w	80050ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ffe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005000:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800500c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e3      	bne.n	8004fda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3314      	adds	r3, #20
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	623b      	str	r3, [r7, #32]
   return(result);
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3314      	adds	r3, #20
 8005032:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005036:	633a      	str	r2, [r7, #48]	@ 0x30
 8005038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800503c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e3      	bne.n	8005012 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60fb      	str	r3, [r7, #12]
   return(result);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0310 	bic.w	r3, r3, #16
 800506e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	330c      	adds	r3, #12
 8005078:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800507c:	61fa      	str	r2, [r7, #28]
 800507e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	69b9      	ldr	r1, [r7, #24]
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	617b      	str	r3, [r7, #20]
   return(result);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e3      	bne.n	8005058 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005096:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f83b 	bl	8005118 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050a2:	e023      	b.n	80050ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <HAL_UART_IRQHandler+0x4f4>
 80050b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f8e5 	bl	800528c <UART_Transmit_IT>
    return;
 80050c2:	e014      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <HAL_UART_IRQHandler+0x51e>
 80050d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f924 	bl	800532a <UART_EndTransmit_IT>
    return;
 80050e2:	e004      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
    return;
 80050e4:	bf00      	nop
 80050e6:	e002      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
      return;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
      return;
 80050ec:	bf00      	nop
  }
}
 80050ee:	37e8      	adds	r7, #232	@ 0xe8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	88fa      	ldrh	r2, [r7, #6]
 8005146:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2222      	movs	r2, #34	@ 0x22
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005172:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0220 	orr.w	r2, r2, #32
 8005192:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b095      	sub	sp, #84	@ 0x54
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e5      	bne.n	80051a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3314      	adds	r3, #20
 80051e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3314      	adds	r3, #20
 80051fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e5      	bne.n	80051dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	2b01      	cmp	r3, #1
 8005216:	d119      	bne.n	800524c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	60bb      	str	r3, [r7, #8]
   return(result);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f023 0310 	bic.w	r3, r3, #16
 800522e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005238:	61ba      	str	r2, [r7, #24]
 800523a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6979      	ldr	r1, [r7, #20]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	613b      	str	r3, [r7, #16]
   return(result);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e5      	bne.n	8005218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800525a:	bf00      	nop
 800525c:	3754      	adds	r7, #84	@ 0x54
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f7ff ff41 	bl	8005106 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005284:	bf00      	nop
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b21      	cmp	r3, #33	@ 0x21
 800529e:	d13e      	bne.n	800531e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a8:	d114      	bne.n	80052d4 <UART_Transmit_IT+0x48>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d110      	bne.n	80052d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	1c9a      	adds	r2, r3, #2
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	621a      	str	r2, [r3, #32]
 80052d2:	e008      	b.n	80052e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	1c59      	adds	r1, r3, #1
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6211      	str	r1, [r2, #32]
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4619      	mov	r1, r3
 80052f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10f      	bne.n	800531a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005308:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005318:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	e000      	b.n	8005320 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
  }
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005340:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fed2 	bl	80050f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b08c      	sub	sp, #48	@ 0x30
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b22      	cmp	r3, #34	@ 0x22
 800536c:	f040 80ae 	bne.w	80054cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005378:	d117      	bne.n	80053aa <UART_Receive_IT+0x50>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d113      	bne.n	80053aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005398:	b29a      	uxth	r2, r3
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	1c9a      	adds	r2, r3, #2
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80053a8:	e026      	b.n	80053f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053bc:	d007      	beq.n	80053ce <UART_Receive_IT+0x74>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <UART_Receive_IT+0x82>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	e008      	b.n	80053ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29b      	uxth	r3, r3
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	4619      	mov	r1, r3
 8005406:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005408:	2b00      	cmp	r3, #0
 800540a:	d15d      	bne.n	80054c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0220 	bic.w	r2, r2, #32
 800541a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800542a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695a      	ldr	r2, [r3, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544e:	2b01      	cmp	r3, #1
 8005450:	d135      	bne.n	80054be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	613b      	str	r3, [r7, #16]
   return(result);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f023 0310 	bic.w	r3, r3, #16
 800546e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005478:	623a      	str	r2, [r7, #32]
 800547a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	69f9      	ldr	r1, [r7, #28]
 800547e:	6a3a      	ldr	r2, [r7, #32]
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	61bb      	str	r3, [r7, #24]
   return(result);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e5      	bne.n	8005458 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b10      	cmp	r3, #16
 8005498:	d10a      	bne.n	80054b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fe2e 	bl	8005118 <HAL_UARTEx_RxEventCallback>
 80054bc:	e002      	b.n	80054c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fb fc38 	bl	8000d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e002      	b.n	80054ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e000      	b.n	80054ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054cc:	2302      	movs	r3, #2
  }
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3730      	adds	r7, #48	@ 0x30
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005512:	f023 030c 	bic.w	r3, r3, #12
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6812      	ldr	r2, [r2, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	430b      	orrs	r3, r1
 800551e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2c      	ldr	r2, [pc, #176]	@ (80055ec <UART_SetConfig+0x114>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d103      	bne.n	8005548 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005540:	f7fe fa90 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	e002      	b.n	800554e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005548:	f7fe fa78 	bl	8003a3c <HAL_RCC_GetPCLK1Freq>
 800554c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	009a      	lsls	r2, r3, #2
 8005558:	441a      	add	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	4a22      	ldr	r2, [pc, #136]	@ (80055f0 <UART_SetConfig+0x118>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	0119      	lsls	r1, r3, #4
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009a      	lsls	r2, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	fbb2 f2f3 	udiv	r2, r2, r3
 8005584:	4b1a      	ldr	r3, [pc, #104]	@ (80055f0 <UART_SetConfig+0x118>)
 8005586:	fba3 0302 	umull	r0, r3, r3, r2
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	2064      	movs	r0, #100	@ 0x64
 800558e:	fb00 f303 	mul.w	r3, r0, r3
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	3332      	adds	r3, #50	@ 0x32
 8005598:	4a15      	ldr	r2, [pc, #84]	@ (80055f0 <UART_SetConfig+0x118>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055a4:	4419      	add	r1, r3
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009a      	lsls	r2, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055bc:	4b0c      	ldr	r3, [pc, #48]	@ (80055f0 <UART_SetConfig+0x118>)
 80055be:	fba3 0302 	umull	r0, r3, r3, r2
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	2064      	movs	r0, #100	@ 0x64
 80055c6:	fb00 f303 	mul.w	r3, r0, r3
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	3332      	adds	r3, #50	@ 0x32
 80055d0:	4a07      	ldr	r2, [pc, #28]	@ (80055f0 <UART_SetConfig+0x118>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	440a      	add	r2, r1
 80055e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40013800 	.word	0x40013800
 80055f0:	51eb851f 	.word	0x51eb851f

080055f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005606:	2b84      	cmp	r3, #132	@ 0x84
 8005608:	d005      	beq.n	8005616 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800560a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	3303      	adds	r3, #3
 8005614:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005626:	f000 fadf 	bl	8005be8 <vTaskStartScheduler>
  
  return osOK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	bd80      	pop	{r7, pc}

08005630 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005632:	b089      	sub	sp, #36	@ 0x24
 8005634:	af04      	add	r7, sp, #16
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d020      	beq.n	8005684 <osThreadCreate+0x54>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01c      	beq.n	8005684 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685c      	ldr	r4, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691e      	ldr	r6, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff ffc9 	bl	80055f4 <makeFreeRtosPriority>
 8005662:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800566c:	9202      	str	r2, [sp, #8]
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	9100      	str	r1, [sp, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	4632      	mov	r2, r6
 8005676:	4629      	mov	r1, r5
 8005678:	4620      	mov	r0, r4
 800567a:	f000 f8e8 	bl	800584e <xTaskCreateStatic>
 800567e:	4603      	mov	r3, r0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e01c      	b.n	80056be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685c      	ldr	r4, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005690:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ffab 	bl	80055f4 <makeFreeRtosPriority>
 800569e:	4602      	mov	r2, r0
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	9200      	str	r2, [sp, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4632      	mov	r2, r6
 80056ac:	4629      	mov	r1, r5
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 f92d 	bl	800590e <xTaskCreate>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d001      	beq.n	80056be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056be:	68fb      	ldr	r3, [r7, #12]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <osDelay+0x16>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	e000      	b.n	80056e0 <osDelay+0x18>
 80056de:	2301      	movs	r3, #1
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fa4b 	bl	8005b7c <vTaskDelay>
  
  return osOK;
 80056e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f103 0208 	add.w	r2, r3, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f103 0208 	add.w	r2, r3, #8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f103 0208 	add.w	r2, r3, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr

0800572e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d103      	bne.n	80057ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e00c      	b.n	80057c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3308      	adds	r3, #8
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	e002      	b.n	80057ba <vListInsert+0x2e>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d2f6      	bcs.n	80057b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
}
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6892      	ldr	r2, [r2, #8]
 8005812:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6852      	ldr	r2, [r2, #4]
 800581c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d103      	bne.n	8005830 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	1e5a      	subs	r2, r3, #1
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800584e:	b580      	push	{r7, lr}
 8005850:	b08e      	sub	sp, #56	@ 0x38
 8005852:	af04      	add	r7, sp, #16
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800585c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	e7fd      	b.n	8005876 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10b      	bne.n	8005898 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	61fb      	str	r3, [r7, #28]
}
 8005892:	bf00      	nop
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005898:	2354      	movs	r3, #84	@ 0x54
 800589a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b54      	cmp	r3, #84	@ 0x54
 80058a0:	d00b      	beq.n	80058ba <xTaskCreateStatic+0x6c>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	61bb      	str	r3, [r7, #24]
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	e7fd      	b.n	80058b6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01e      	beq.n	8005900 <xTaskCreateStatic+0xb2>
 80058c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058da:	2300      	movs	r3, #0
 80058dc:	9303      	str	r3, [sp, #12]
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	9302      	str	r3, [sp, #8]
 80058e2:	f107 0314 	add.w	r3, r7, #20
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f850 	bl	8005998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058fa:	f000 f8d5 	bl	8005aa8 <prvAddNewTaskToReadyList>
 80058fe:	e001      	b.n	8005904 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005904:	697b      	ldr	r3, [r7, #20]
	}
 8005906:	4618      	mov	r0, r3
 8005908:	3728      	adds	r7, #40	@ 0x28
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800590e:	b580      	push	{r7, lr}
 8005910:	b08c      	sub	sp, #48	@ 0x30
 8005912:	af04      	add	r7, sp, #16
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	603b      	str	r3, [r7, #0]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fe74 	bl	8006610 <pvPortMalloc>
 8005928:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00e      	beq.n	800594e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005930:	2054      	movs	r0, #84	@ 0x54
 8005932:	f000 fe6d 	bl	8006610 <pvPortMalloc>
 8005936:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	631a      	str	r2, [r3, #48]	@ 0x30
 8005944:	e005      	b.n	8005952 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005946:	6978      	ldr	r0, [r7, #20]
 8005948:	f000 ff30 	bl	80067ac <vPortFree>
 800594c:	e001      	b.n	8005952 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d017      	beq.n	8005988 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005960:	88fa      	ldrh	r2, [r7, #6]
 8005962:	2300      	movs	r3, #0
 8005964:	9303      	str	r3, [sp, #12]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	9302      	str	r3, [sp, #8]
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f80e 	bl	8005998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800597c:	69f8      	ldr	r0, [r7, #28]
 800597e:	f000 f893 	bl	8005aa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005982:	2301      	movs	r3, #1
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	e002      	b.n	800598e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005988:	f04f 33ff 	mov.w	r3, #4294967295
 800598c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800598e:	69bb      	ldr	r3, [r7, #24]
	}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059b0:	3b01      	subs	r3, #1
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f023 0307 	bic.w	r3, r3, #7
 80059be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	617b      	str	r3, [r7, #20]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01f      	beq.n	8005a28 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e8:	2300      	movs	r3, #0
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	e012      	b.n	8005a14 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	7819      	ldrb	r1, [r3, #0]
 80059f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	3334      	adds	r3, #52	@ 0x34
 80059fe:	460a      	mov	r2, r1
 8005a00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3301      	adds	r3, #1
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	2b0f      	cmp	r3, #15
 8005a18:	d9e9      	bls.n	80059ee <prvInitialiseNewTask+0x56>
 8005a1a:	e000      	b.n	8005a1e <prvInitialiseNewTask+0x86>
			{
				break;
 8005a1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a26:	e003      	b.n	8005a30 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a32:	2b06      	cmp	r3, #6
 8005a34:	d901      	bls.n	8005a3a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a36:	2306      	movs	r3, #6
 8005a38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a44:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	2200      	movs	r2, #0
 8005a4a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fe6c 	bl	800572e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	3318      	adds	r3, #24
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fe67 	bl	800572e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a68:	f1c3 0207 	rsb	r2, r3, #7
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	2200      	movs	r2, #0
 8005a7a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	68f9      	ldr	r1, [r7, #12]
 8005a88:	69b8      	ldr	r0, [r7, #24]
 8005a8a:	f000 fc0d 	bl	80062a8 <pxPortInitialiseStack>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa0:	bf00      	nop
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ab0:	f000 fcec 	bl	800648c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b60 <prvAddNewTaskToReadyList+0xb8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	4a29      	ldr	r2, [pc, #164]	@ (8005b60 <prvAddNewTaskToReadyList+0xb8>)
 8005abc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005abe:	4b29      	ldr	r3, [pc, #164]	@ (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ac6:	4a27      	ldr	r2, [pc, #156]	@ (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005acc:	4b24      	ldr	r3, [pc, #144]	@ (8005b60 <prvAddNewTaskToReadyList+0xb8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d110      	bne.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ad4:	f000 fac4 	bl	8006060 <prvInitialiseTaskLists>
 8005ad8:	e00d      	b.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ada:	4b23      	ldr	r3, [pc, #140]	@ (8005b68 <prvAddNewTaskToReadyList+0xc0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ae2:	4b20      	ldr	r3, [pc, #128]	@ (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d802      	bhi.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005af0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005af6:	4b1d      	ldr	r3, [pc, #116]	@ (8005b6c <prvAddNewTaskToReadyList+0xc4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	4a1b      	ldr	r2, [pc, #108]	@ (8005b6c <prvAddNewTaskToReadyList+0xc4>)
 8005afe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	2201      	movs	r2, #1
 8005b06:	409a      	lsls	r2, r3
 8005b08:	4b19      	ldr	r3, [pc, #100]	@ (8005b70 <prvAddNewTaskToReadyList+0xc8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	4a18      	ldr	r2, [pc, #96]	@ (8005b70 <prvAddNewTaskToReadyList+0xc8>)
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <prvAddNewTaskToReadyList+0xcc>)
 8005b20:	441a      	add	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f7ff fe0c 	bl	8005746 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b2e:	f000 fcdd 	bl	80064ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b32:	4b0d      	ldr	r3, [pc, #52]	@ (8005b68 <prvAddNewTaskToReadyList+0xc0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d207      	bcs.n	8005b58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b48:	4b0b      	ldr	r3, [pc, #44]	@ (8005b78 <prvAddNewTaskToReadyList+0xd0>)
 8005b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	2000067c 	.word	0x2000067c
 8005b64:	2000057c 	.word	0x2000057c
 8005b68:	20000688 	.word	0x20000688
 8005b6c:	20000698 	.word	0x20000698
 8005b70:	20000684 	.word	0x20000684
 8005b74:	20000580 	.word	0x20000580
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d018      	beq.n	8005bc0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b8e:	4b14      	ldr	r3, [pc, #80]	@ (8005be0 <vTaskDelay+0x64>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <vTaskDelay+0x32>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	60bb      	str	r3, [r7, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	e7fd      	b.n	8005baa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bae:	f000 f87d 	bl	8005cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fb11 	bl	80061dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bba:	f000 f885 	bl	8005cc8 <xTaskResumeAll>
 8005bbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d107      	bne.n	8005bd6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005bc6:	4b07      	ldr	r3, [pc, #28]	@ (8005be4 <vTaskDelay+0x68>)
 8005bc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bd6:	bf00      	nop
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	200006a4 	.word	0x200006a4
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	@ 0x28
 8005bec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bf6:	463a      	mov	r2, r7
 8005bf8:	1d39      	adds	r1, r7, #4
 8005bfa:	f107 0308 	add.w	r3, r7, #8
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fb f868 	bl	8000cd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	9202      	str	r2, [sp, #8]
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	2300      	movs	r3, #0
 8005c14:	460a      	mov	r2, r1
 8005c16:	491f      	ldr	r1, [pc, #124]	@ (8005c94 <vTaskStartScheduler+0xac>)
 8005c18:	481f      	ldr	r0, [pc, #124]	@ (8005c98 <vTaskStartScheduler+0xb0>)
 8005c1a:	f7ff fe18 	bl	800584e <xTaskCreateStatic>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4a1e      	ldr	r2, [pc, #120]	@ (8005c9c <vTaskStartScheduler+0xb4>)
 8005c22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c24:	4b1d      	ldr	r3, [pc, #116]	@ (8005c9c <vTaskStartScheduler+0xb4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e001      	b.n	8005c36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d116      	bne.n	8005c6a <vTaskStartScheduler+0x82>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	613b      	str	r3, [r7, #16]
}
 8005c4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c50:	4b13      	ldr	r3, [pc, #76]	@ (8005ca0 <vTaskStartScheduler+0xb8>)
 8005c52:	f04f 32ff 	mov.w	r2, #4294967295
 8005c56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c58:	4b12      	ldr	r3, [pc, #72]	@ (8005ca4 <vTaskStartScheduler+0xbc>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ca8 <vTaskStartScheduler+0xc0>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c64:	f000 fba0 	bl	80063a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c68:	e00f      	b.n	8005c8a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d10b      	bne.n	8005c8a <vTaskStartScheduler+0xa2>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	e7fd      	b.n	8005c86 <vTaskStartScheduler+0x9e>
}
 8005c8a:	bf00      	nop
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	08007530 	.word	0x08007530
 8005c98:	08006031 	.word	0x08006031
 8005c9c:	200006a0 	.word	0x200006a0
 8005ca0:	2000069c 	.word	0x2000069c
 8005ca4:	20000688 	.word	0x20000688
 8005ca8:	20000680 	.word	0x20000680

08005cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cb0:	4b04      	ldr	r3, [pc, #16]	@ (8005cc4 <vTaskSuspendAll+0x18>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	4a03      	ldr	r2, [pc, #12]	@ (8005cc4 <vTaskSuspendAll+0x18>)
 8005cb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cba:	bf00      	nop
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	200006a4 	.word	0x200006a4

08005cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cd6:	4b42      	ldr	r3, [pc, #264]	@ (8005de0 <xTaskResumeAll+0x118>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <xTaskResumeAll+0x2e>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	603b      	str	r3, [r7, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cf6:	f000 fbc9 	bl	800648c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cfa:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <xTaskResumeAll+0x118>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	4a37      	ldr	r2, [pc, #220]	@ (8005de0 <xTaskResumeAll+0x118>)
 8005d02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d04:	4b36      	ldr	r3, [pc, #216]	@ (8005de0 <xTaskResumeAll+0x118>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d161      	bne.n	8005dd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d0c:	4b35      	ldr	r3, [pc, #212]	@ (8005de4 <xTaskResumeAll+0x11c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d05d      	beq.n	8005dd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d14:	e02e      	b.n	8005d74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d16:	4b34      	ldr	r3, [pc, #208]	@ (8005de8 <xTaskResumeAll+0x120>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3318      	adds	r3, #24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fd6a 	bl	80057fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fd65 	bl	80057fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d36:	2201      	movs	r2, #1
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005dec <xTaskResumeAll+0x124>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	4a2a      	ldr	r2, [pc, #168]	@ (8005dec <xTaskResumeAll+0x124>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a27      	ldr	r2, [pc, #156]	@ (8005df0 <xTaskResumeAll+0x128>)
 8005d52:	441a      	add	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7ff fcf3 	bl	8005746 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d64:	4b23      	ldr	r3, [pc, #140]	@ (8005df4 <xTaskResumeAll+0x12c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d6e:	4b22      	ldr	r3, [pc, #136]	@ (8005df8 <xTaskResumeAll+0x130>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d74:	4b1c      	ldr	r3, [pc, #112]	@ (8005de8 <xTaskResumeAll+0x120>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1cc      	bne.n	8005d16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d82:	f000 fa0b 	bl	800619c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d86:	4b1d      	ldr	r3, [pc, #116]	@ (8005dfc <xTaskResumeAll+0x134>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d010      	beq.n	8005db4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d92:	f000 f837 	bl	8005e04 <xTaskIncrementTick>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d9c:	4b16      	ldr	r3, [pc, #88]	@ (8005df8 <xTaskResumeAll+0x130>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f1      	bne.n	8005d92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005dae:	4b13      	ldr	r3, [pc, #76]	@ (8005dfc <xTaskResumeAll+0x134>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005db4:	4b10      	ldr	r3, [pc, #64]	@ (8005df8 <xTaskResumeAll+0x130>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d009      	beq.n	8005dd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005e00 <xTaskResumeAll+0x138>)
 8005dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dd0:	f000 fb8c 	bl	80064ec <vPortExitCritical>

	return xAlreadyYielded;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	200006a4 	.word	0x200006a4
 8005de4:	2000067c 	.word	0x2000067c
 8005de8:	2000063c 	.word	0x2000063c
 8005dec:	20000684 	.word	0x20000684
 8005df0:	20000580 	.word	0x20000580
 8005df4:	2000057c 	.word	0x2000057c
 8005df8:	20000690 	.word	0x20000690
 8005dfc:	2000068c 	.word	0x2000068c
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e0e:	4b4f      	ldr	r3, [pc, #316]	@ (8005f4c <xTaskIncrementTick+0x148>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f040 808f 	bne.w	8005f36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e18:	4b4d      	ldr	r3, [pc, #308]	@ (8005f50 <xTaskIncrementTick+0x14c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e20:	4a4b      	ldr	r2, [pc, #300]	@ (8005f50 <xTaskIncrementTick+0x14c>)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d121      	bne.n	8005e70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e2c:	4b49      	ldr	r3, [pc, #292]	@ (8005f54 <xTaskIncrementTick+0x150>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	603b      	str	r3, [r7, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <xTaskIncrementTick+0x46>
 8005e4e:	4b41      	ldr	r3, [pc, #260]	@ (8005f54 <xTaskIncrementTick+0x150>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	4b40      	ldr	r3, [pc, #256]	@ (8005f58 <xTaskIncrementTick+0x154>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a3e      	ldr	r2, [pc, #248]	@ (8005f54 <xTaskIncrementTick+0x150>)
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f58 <xTaskIncrementTick+0x154>)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4b3e      	ldr	r3, [pc, #248]	@ (8005f5c <xTaskIncrementTick+0x158>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	4a3c      	ldr	r2, [pc, #240]	@ (8005f5c <xTaskIncrementTick+0x158>)
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	f000 f996 	bl	800619c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e70:	4b3b      	ldr	r3, [pc, #236]	@ (8005f60 <xTaskIncrementTick+0x15c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d348      	bcc.n	8005f0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e7a:	4b36      	ldr	r3, [pc, #216]	@ (8005f54 <xTaskIncrementTick+0x150>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d104      	bne.n	8005e8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e84:	4b36      	ldr	r3, [pc, #216]	@ (8005f60 <xTaskIncrementTick+0x15c>)
 8005e86:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8a:	601a      	str	r2, [r3, #0]
					break;
 8005e8c:	e03e      	b.n	8005f0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8e:	4b31      	ldr	r3, [pc, #196]	@ (8005f54 <xTaskIncrementTick+0x150>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d203      	bcs.n	8005eae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ea6:	4a2e      	ldr	r2, [pc, #184]	@ (8005f60 <xTaskIncrementTick+0x15c>)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005eac:	e02e      	b.n	8005f0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fca2 	bl	80057fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	3318      	adds	r3, #24
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff fc99 	bl	80057fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ece:	2201      	movs	r2, #1
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	4b24      	ldr	r3, [pc, #144]	@ (8005f64 <xTaskIncrementTick+0x160>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	4a22      	ldr	r2, [pc, #136]	@ (8005f64 <xTaskIncrementTick+0x160>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f68 <xTaskIncrementTick+0x164>)
 8005eea:	441a      	add	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f7ff fc27 	bl	8005746 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f6c <xTaskIncrementTick+0x168>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3b9      	bcc.n	8005e7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f0a:	e7b6      	b.n	8005e7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f0c:	4b17      	ldr	r3, [pc, #92]	@ (8005f6c <xTaskIncrementTick+0x168>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f12:	4915      	ldr	r1, [pc, #84]	@ (8005f68 <xTaskIncrementTick+0x164>)
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d901      	bls.n	8005f28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f28:	4b11      	ldr	r3, [pc, #68]	@ (8005f70 <xTaskIncrementTick+0x16c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f30:	2301      	movs	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e004      	b.n	8005f40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f36:	4b0f      	ldr	r3, [pc, #60]	@ (8005f74 <xTaskIncrementTick+0x170>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f74 <xTaskIncrementTick+0x170>)
 8005f3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f40:	697b      	ldr	r3, [r7, #20]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200006a4 	.word	0x200006a4
 8005f50:	20000680 	.word	0x20000680
 8005f54:	20000634 	.word	0x20000634
 8005f58:	20000638 	.word	0x20000638
 8005f5c:	20000694 	.word	0x20000694
 8005f60:	2000069c 	.word	0x2000069c
 8005f64:	20000684 	.word	0x20000684
 8005f68:	20000580 	.word	0x20000580
 8005f6c:	2000057c 	.word	0x2000057c
 8005f70:	20000690 	.word	0x20000690
 8005f74:	2000068c 	.word	0x2000068c

08005f78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f7e:	4b27      	ldr	r3, [pc, #156]	@ (800601c <vTaskSwitchContext+0xa4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f86:	4b26      	ldr	r3, [pc, #152]	@ (8006020 <vTaskSwitchContext+0xa8>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f8c:	e040      	b.n	8006010 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005f8e:	4b24      	ldr	r3, [pc, #144]	@ (8006020 <vTaskSwitchContext+0xa8>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f94:	4b23      	ldr	r3, [pc, #140]	@ (8006024 <vTaskSwitchContext+0xac>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	fab3 f383 	clz	r3, r3
 8005fa0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
 8005fa4:	f1c3 031f 	rsb	r3, r3, #31
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	491f      	ldr	r1, [pc, #124]	@ (8006028 <vTaskSwitchContext+0xb0>)
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <vTaskSwitchContext+0x5a>
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4a11      	ldr	r2, [pc, #68]	@ (8006028 <vTaskSwitchContext+0xb0>)
 8005fe2:	4413      	add	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	605a      	str	r2, [r3, #4]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d104      	bne.n	8006006 <vTaskSwitchContext+0x8e>
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4a07      	ldr	r2, [pc, #28]	@ (800602c <vTaskSwitchContext+0xb4>)
 800600e:	6013      	str	r3, [r2, #0]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	200006a4 	.word	0x200006a4
 8006020:	20000690 	.word	0x20000690
 8006024:	20000684 	.word	0x20000684
 8006028:	20000580 	.word	0x20000580
 800602c:	2000057c 	.word	0x2000057c

08006030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006038:	f000 f852 	bl	80060e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800603c:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <prvIdleTask+0x28>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d9f9      	bls.n	8006038 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006044:	4b05      	ldr	r3, [pc, #20]	@ (800605c <prvIdleTask+0x2c>)
 8006046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006054:	e7f0      	b.n	8006038 <prvIdleTask+0x8>
 8006056:	bf00      	nop
 8006058:	20000580 	.word	0x20000580
 800605c:	e000ed04 	.word	0xe000ed04

08006060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006066:	2300      	movs	r3, #0
 8006068:	607b      	str	r3, [r7, #4]
 800606a:	e00c      	b.n	8006086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4a12      	ldr	r2, [pc, #72]	@ (80060c0 <prvInitialiseTaskLists+0x60>)
 8006078:	4413      	add	r3, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fb38 	bl	80056f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3301      	adds	r3, #1
 8006084:	607b      	str	r3, [r7, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b06      	cmp	r3, #6
 800608a:	d9ef      	bls.n	800606c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800608c:	480d      	ldr	r0, [pc, #52]	@ (80060c4 <prvInitialiseTaskLists+0x64>)
 800608e:	f7ff fb2f 	bl	80056f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006092:	480d      	ldr	r0, [pc, #52]	@ (80060c8 <prvInitialiseTaskLists+0x68>)
 8006094:	f7ff fb2c 	bl	80056f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006098:	480c      	ldr	r0, [pc, #48]	@ (80060cc <prvInitialiseTaskLists+0x6c>)
 800609a:	f7ff fb29 	bl	80056f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800609e:	480c      	ldr	r0, [pc, #48]	@ (80060d0 <prvInitialiseTaskLists+0x70>)
 80060a0:	f7ff fb26 	bl	80056f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060a4:	480b      	ldr	r0, [pc, #44]	@ (80060d4 <prvInitialiseTaskLists+0x74>)
 80060a6:	f7ff fb23 	bl	80056f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060aa:	4b0b      	ldr	r3, [pc, #44]	@ (80060d8 <prvInitialiseTaskLists+0x78>)
 80060ac:	4a05      	ldr	r2, [pc, #20]	@ (80060c4 <prvInitialiseTaskLists+0x64>)
 80060ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <prvInitialiseTaskLists+0x7c>)
 80060b2:	4a05      	ldr	r2, [pc, #20]	@ (80060c8 <prvInitialiseTaskLists+0x68>)
 80060b4:	601a      	str	r2, [r3, #0]
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000580 	.word	0x20000580
 80060c4:	2000060c 	.word	0x2000060c
 80060c8:	20000620 	.word	0x20000620
 80060cc:	2000063c 	.word	0x2000063c
 80060d0:	20000650 	.word	0x20000650
 80060d4:	20000668 	.word	0x20000668
 80060d8:	20000634 	.word	0x20000634
 80060dc:	20000638 	.word	0x20000638

080060e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060e6:	e019      	b.n	800611c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060e8:	f000 f9d0 	bl	800648c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ec:	4b10      	ldr	r3, [pc, #64]	@ (8006130 <prvCheckTasksWaitingTermination+0x50>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fb7f 	bl	80057fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <prvCheckTasksWaitingTermination+0x54>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3b01      	subs	r3, #1
 8006104:	4a0b      	ldr	r2, [pc, #44]	@ (8006134 <prvCheckTasksWaitingTermination+0x54>)
 8006106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006108:	4b0b      	ldr	r3, [pc, #44]	@ (8006138 <prvCheckTasksWaitingTermination+0x58>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3b01      	subs	r3, #1
 800610e:	4a0a      	ldr	r2, [pc, #40]	@ (8006138 <prvCheckTasksWaitingTermination+0x58>)
 8006110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006112:	f000 f9eb 	bl	80064ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f810 	bl	800613c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800611c:	4b06      	ldr	r3, [pc, #24]	@ (8006138 <prvCheckTasksWaitingTermination+0x58>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e1      	bne.n	80060e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000650 	.word	0x20000650
 8006134:	2000067c 	.word	0x2000067c
 8006138:	20000664 	.word	0x20000664

0800613c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fb2a 	bl	80067ac <vPortFree>
				vPortFree( pxTCB );
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fb27 	bl	80067ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800615e:	e019      	b.n	8006194 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006166:	2b01      	cmp	r3, #1
 8006168:	d103      	bne.n	8006172 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fb1e 	bl	80067ac <vPortFree>
	}
 8006170:	e010      	b.n	8006194 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006178:	2b02      	cmp	r3, #2
 800617a:	d00b      	beq.n	8006194 <prvDeleteTCB+0x58>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60fb      	str	r3, [r7, #12]
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	e7fd      	b.n	8006190 <prvDeleteTCB+0x54>
	}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a2:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <prvResetNextTaskUnblockTime+0x38>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061ac:	4b0a      	ldr	r3, [pc, #40]	@ (80061d8 <prvResetNextTaskUnblockTime+0x3c>)
 80061ae:	f04f 32ff 	mov.w	r2, #4294967295
 80061b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061b4:	e008      	b.n	80061c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b6:	4b07      	ldr	r3, [pc, #28]	@ (80061d4 <prvResetNextTaskUnblockTime+0x38>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4a04      	ldr	r2, [pc, #16]	@ (80061d8 <prvResetNextTaskUnblockTime+0x3c>)
 80061c6:	6013      	str	r3, [r2, #0]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000634 	.word	0x20000634
 80061d8:	2000069c 	.word	0x2000069c

080061dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061e6:	4b29      	ldr	r3, [pc, #164]	@ (800628c <prvAddCurrentTaskToDelayedList+0xb0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ec:	4b28      	ldr	r3, [pc, #160]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff fb02 	bl	80057fc <uxListRemove>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061fe:	4b24      	ldr	r3, [pc, #144]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	2201      	movs	r2, #1
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43da      	mvns	r2, r3
 800620c:	4b21      	ldr	r3, [pc, #132]	@ (8006294 <prvAddCurrentTaskToDelayedList+0xb8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4013      	ands	r3, r2
 8006212:	4a20      	ldr	r2, [pc, #128]	@ (8006294 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006214:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d10a      	bne.n	8006234 <prvAddCurrentTaskToDelayedList+0x58>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006224:	4b1a      	ldr	r3, [pc, #104]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	481a      	ldr	r0, [pc, #104]	@ (8006298 <prvAddCurrentTaskToDelayedList+0xbc>)
 800622e:	f7ff fa8a 	bl	8005746 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006232:	e026      	b.n	8006282 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4413      	add	r3, r2
 800623a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800623c:	4b14      	ldr	r3, [pc, #80]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	429a      	cmp	r2, r3
 800624a:	d209      	bcs.n	8006260 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624c:	4b13      	ldr	r3, [pc, #76]	@ (800629c <prvAddCurrentTaskToDelayedList+0xc0>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b0f      	ldr	r3, [pc, #60]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3304      	adds	r3, #4
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f7ff fa97 	bl	800578c <vListInsert>
}
 800625e:	e010      	b.n	8006282 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006260:	4b0f      	ldr	r3, [pc, #60]	@ (80062a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7ff fa8d 	bl	800578c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006272:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	d202      	bcs.n	8006282 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800627c:	4a09      	ldr	r2, [pc, #36]	@ (80062a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6013      	str	r3, [r2, #0]
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000680 	.word	0x20000680
 8006290:	2000057c 	.word	0x2000057c
 8006294:	20000684 	.word	0x20000684
 8006298:	20000668 	.word	0x20000668
 800629c:	20000638 	.word	0x20000638
 80062a0:	20000634 	.word	0x20000634
 80062a4:	2000069c 	.word	0x2000069c

080062a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3b04      	subs	r3, #4
 80062b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f023 0201 	bic.w	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b04      	subs	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062d8:	4a08      	ldr	r2, [pc, #32]	@ (80062fc <pxPortInitialiseStack+0x54>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b14      	subs	r3, #20
 80062e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b20      	subs	r3, #32
 80062ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr
 80062fc:	08006301 	.word	0x08006301

08006300 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006306:	2300      	movs	r3, #0
 8006308:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800630a:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <prvTaskExitError+0x54>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006312:	d00b      	beq.n	800632c <prvTaskExitError+0x2c>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60fb      	str	r3, [r7, #12]
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <prvTaskExitError+0x28>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	60bb      	str	r3, [r7, #8]
}
 800633e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006340:	bf00      	nop
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0fc      	beq.n	8006342 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	20000010 	.word	0x20000010
	...

08006360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006360:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <pxCurrentTCBConst2>)
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	6808      	ldr	r0, [r1, #0]
 8006366:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800636a:	f380 8809 	msr	PSP, r0
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8811 	msr	BASEPRI, r0
 800637a:	f04e 0e0d 	orr.w	lr, lr, #13
 800637e:	4770      	bx	lr

08006380 <pxCurrentTCBConst2>:
 8006380:	2000057c 	.word	0x2000057c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop

08006388 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006388:	4806      	ldr	r0, [pc, #24]	@ (80063a4 <prvPortStartFirstTask+0x1c>)
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	6800      	ldr	r0, [r0, #0]
 800638e:	f380 8808 	msr	MSP, r0
 8006392:	b662      	cpsie	i
 8006394:	b661      	cpsie	f
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	df00      	svc	0
 80063a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063a2:	bf00      	nop
 80063a4:	e000ed08 	.word	0xe000ed08

080063a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063ae:	4b32      	ldr	r3, [pc, #200]	@ (8006478 <xPortStartScheduler+0xd0>)
 80063b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	22ff      	movs	r2, #255	@ 0xff
 80063be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	4b2a      	ldr	r3, [pc, #168]	@ (800647c <xPortStartScheduler+0xd4>)
 80063d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063d6:	4b2a      	ldr	r3, [pc, #168]	@ (8006480 <xPortStartScheduler+0xd8>)
 80063d8:	2207      	movs	r2, #7
 80063da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063dc:	e009      	b.n	80063f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80063de:	4b28      	ldr	r3, [pc, #160]	@ (8006480 <xPortStartScheduler+0xd8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	4a26      	ldr	r2, [pc, #152]	@ (8006480 <xPortStartScheduler+0xd8>)
 80063e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fa:	2b80      	cmp	r3, #128	@ 0x80
 80063fc:	d0ef      	beq.n	80063de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063fe:	4b20      	ldr	r3, [pc, #128]	@ (8006480 <xPortStartScheduler+0xd8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f1c3 0307 	rsb	r3, r3, #7
 8006406:	2b04      	cmp	r3, #4
 8006408:	d00b      	beq.n	8006422 <xPortStartScheduler+0x7a>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	60bb      	str	r3, [r7, #8]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006422:	4b17      	ldr	r3, [pc, #92]	@ (8006480 <xPortStartScheduler+0xd8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	4a15      	ldr	r2, [pc, #84]	@ (8006480 <xPortStartScheduler+0xd8>)
 800642a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800642c:	4b14      	ldr	r3, [pc, #80]	@ (8006480 <xPortStartScheduler+0xd8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006434:	4a12      	ldr	r2, [pc, #72]	@ (8006480 <xPortStartScheduler+0xd8>)
 8006436:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006440:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <xPortStartScheduler+0xdc>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a0f      	ldr	r2, [pc, #60]	@ (8006484 <xPortStartScheduler+0xdc>)
 8006446:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800644a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800644c:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <xPortStartScheduler+0xdc>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a0c      	ldr	r2, [pc, #48]	@ (8006484 <xPortStartScheduler+0xdc>)
 8006452:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006456:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006458:	f000 f8b8 	bl	80065cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800645c:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <xPortStartScheduler+0xe0>)
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006462:	f7ff ff91 	bl	8006388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006466:	f7ff fd87 	bl	8005f78 <vTaskSwitchContext>
	prvTaskExitError();
 800646a:	f7ff ff49 	bl	8006300 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e000e400 	.word	0xe000e400
 800647c:	200006a8 	.word	0x200006a8
 8006480:	200006ac 	.word	0x200006ac
 8006484:	e000ed20 	.word	0xe000ed20
 8006488:	20000010 	.word	0x20000010

0800648c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	607b      	str	r3, [r7, #4]
}
 80064a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064a6:	4b0f      	ldr	r3, [pc, #60]	@ (80064e4 <vPortEnterCritical+0x58>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3301      	adds	r3, #1
 80064ac:	4a0d      	ldr	r2, [pc, #52]	@ (80064e4 <vPortEnterCritical+0x58>)
 80064ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064b0:	4b0c      	ldr	r3, [pc, #48]	@ (80064e4 <vPortEnterCritical+0x58>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d110      	bne.n	80064da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064b8:	4b0b      	ldr	r3, [pc, #44]	@ (80064e8 <vPortEnterCritical+0x5c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <vPortEnterCritical+0x4e>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	603b      	str	r3, [r7, #0]
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	e7fd      	b.n	80064d6 <vPortEnterCritical+0x4a>
	}
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr
 80064e4:	20000010 	.word	0x20000010
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064f2:	4b12      	ldr	r3, [pc, #72]	@ (800653c <vPortExitCritical+0x50>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <vPortExitCritical+0x26>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	607b      	str	r3, [r7, #4]
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	e7fd      	b.n	800650e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006512:	4b0a      	ldr	r3, [pc, #40]	@ (800653c <vPortExitCritical+0x50>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3b01      	subs	r3, #1
 8006518:	4a08      	ldr	r2, [pc, #32]	@ (800653c <vPortExitCritical+0x50>)
 800651a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800651c:	4b07      	ldr	r3, [pc, #28]	@ (800653c <vPortExitCritical+0x50>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <vPortExitCritical+0x44>
 8006524:	2300      	movs	r3, #0
 8006526:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800652e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	bc80      	pop	{r7}
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20000010 	.word	0x20000010

08006540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006540:	f3ef 8009 	mrs	r0, PSP
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <pxCurrentTCBConst>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006550:	6010      	str	r0, [r2, #0]
 8006552:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006556:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800655a:	f380 8811 	msr	BASEPRI, r0
 800655e:	f7ff fd0b 	bl	8005f78 <vTaskSwitchContext>
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8811 	msr	BASEPRI, r0
 800656a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800656e:	6819      	ldr	r1, [r3, #0]
 8006570:	6808      	ldr	r0, [r1, #0]
 8006572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006576:	f380 8809 	msr	PSP, r0
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	4770      	bx	lr

08006580 <pxCurrentTCBConst>:
 8006580:	2000057c 	.word	0x2000057c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop

08006588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	607b      	str	r3, [r7, #4]
}
 80065a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065a2:	f7ff fc2f 	bl	8005e04 <xTaskIncrementTick>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065ac:	4b06      	ldr	r3, [pc, #24]	@ (80065c8 <SysTick_Handler+0x40>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	2300      	movs	r3, #0
 80065b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f383 8811 	msr	BASEPRI, r3
}
 80065be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	e000ed04 	.word	0xe000ed04

080065cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065d0:	4b0a      	ldr	r3, [pc, #40]	@ (80065fc <vPortSetupTimerInterrupt+0x30>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <vPortSetupTimerInterrupt+0x34>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065dc:	4b09      	ldr	r3, [pc, #36]	@ (8006604 <vPortSetupTimerInterrupt+0x38>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a09      	ldr	r2, [pc, #36]	@ (8006608 <vPortSetupTimerInterrupt+0x3c>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	099b      	lsrs	r3, r3, #6
 80065e8:	4a08      	ldr	r2, [pc, #32]	@ (800660c <vPortSetupTimerInterrupt+0x40>)
 80065ea:	3b01      	subs	r3, #1
 80065ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ee:	4b03      	ldr	r3, [pc, #12]	@ (80065fc <vPortSetupTimerInterrupt+0x30>)
 80065f0:	2207      	movs	r2, #7
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr
 80065fc:	e000e010 	.word	0xe000e010
 8006600:	e000e018 	.word	0xe000e018
 8006604:	20000004 	.word	0x20000004
 8006608:	10624dd3 	.word	0x10624dd3
 800660c:	e000e014 	.word	0xe000e014

08006610 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	@ 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800661c:	f7ff fb46 	bl	8005cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006620:	4b5c      	ldr	r3, [pc, #368]	@ (8006794 <pvPortMalloc+0x184>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006628:	f000 f924 	bl	8006874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800662c:	4b5a      	ldr	r3, [pc, #360]	@ (8006798 <pvPortMalloc+0x188>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 8095 	bne.w	8006764 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01e      	beq.n	800667e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006640:	2208      	movs	r2, #8
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4413      	add	r3, r2
 8006646:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	2b00      	cmp	r3, #0
 8006650:	d015      	beq.n	800667e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f023 0307 	bic.w	r3, r3, #7
 8006658:	3308      	adds	r3, #8
 800665a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <pvPortMalloc+0x6e>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	617b      	str	r3, [r7, #20]
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	e7fd      	b.n	800667a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d06f      	beq.n	8006764 <pvPortMalloc+0x154>
 8006684:	4b45      	ldr	r3, [pc, #276]	@ (800679c <pvPortMalloc+0x18c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	429a      	cmp	r2, r3
 800668c:	d86a      	bhi.n	8006764 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800668e:	4b44      	ldr	r3, [pc, #272]	@ (80067a0 <pvPortMalloc+0x190>)
 8006690:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006692:	4b43      	ldr	r3, [pc, #268]	@ (80067a0 <pvPortMalloc+0x190>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006698:	e004      	b.n	80066a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d903      	bls.n	80066b6 <pvPortMalloc+0xa6>
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f1      	bne.n	800669a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066b6:	4b37      	ldr	r3, [pc, #220]	@ (8006794 <pvPortMalloc+0x184>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066bc:	429a      	cmp	r2, r3
 80066be:	d051      	beq.n	8006764 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2208      	movs	r2, #8
 80066c6:	4413      	add	r3, r2
 80066c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	1ad2      	subs	r2, r2, r3
 80066da:	2308      	movs	r3, #8
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	429a      	cmp	r2, r3
 80066e0:	d920      	bls.n	8006724 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4413      	add	r3, r2
 80066e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <pvPortMalloc+0xfc>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	613b      	str	r3, [r7, #16]
}
 8006706:	bf00      	nop
 8006708:	bf00      	nop
 800670a:	e7fd      	b.n	8006708 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	1ad2      	subs	r2, r2, r3
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800671e:	69b8      	ldr	r0, [r7, #24]
 8006720:	f000 f90a 	bl	8006938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006724:	4b1d      	ldr	r3, [pc, #116]	@ (800679c <pvPortMalloc+0x18c>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	4a1b      	ldr	r2, [pc, #108]	@ (800679c <pvPortMalloc+0x18c>)
 8006730:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006732:	4b1a      	ldr	r3, [pc, #104]	@ (800679c <pvPortMalloc+0x18c>)
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	4b1b      	ldr	r3, [pc, #108]	@ (80067a4 <pvPortMalloc+0x194>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d203      	bcs.n	8006746 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800673e:	4b17      	ldr	r3, [pc, #92]	@ (800679c <pvPortMalloc+0x18c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a18      	ldr	r2, [pc, #96]	@ (80067a4 <pvPortMalloc+0x194>)
 8006744:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	4b13      	ldr	r3, [pc, #76]	@ (8006798 <pvPortMalloc+0x188>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	431a      	orrs	r2, r3
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	2200      	movs	r2, #0
 8006758:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800675a:	4b13      	ldr	r3, [pc, #76]	@ (80067a8 <pvPortMalloc+0x198>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3301      	adds	r3, #1
 8006760:	4a11      	ldr	r2, [pc, #68]	@ (80067a8 <pvPortMalloc+0x198>)
 8006762:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006764:	f7ff fab0 	bl	8005cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <pvPortMalloc+0x17a>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60fb      	str	r3, [r7, #12]
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	e7fd      	b.n	8006786 <pvPortMalloc+0x176>
	return pvReturn;
 800678a:	69fb      	ldr	r3, [r7, #28]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3728      	adds	r7, #40	@ 0x28
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	200012b8 	.word	0x200012b8
 8006798:	200012cc 	.word	0x200012cc
 800679c:	200012bc 	.word	0x200012bc
 80067a0:	200012b0 	.word	0x200012b0
 80067a4:	200012c0 	.word	0x200012c0
 80067a8:	200012c4 	.word	0x200012c4

080067ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d04f      	beq.n	800685e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067be:	2308      	movs	r3, #8
 80067c0:	425b      	negs	r3, r3
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4413      	add	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	4b25      	ldr	r3, [pc, #148]	@ (8006868 <vPortFree+0xbc>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4013      	ands	r3, r2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10b      	bne.n	80067f2 <vPortFree+0x46>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	60fb      	str	r3, [r7, #12]
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	e7fd      	b.n	80067ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <vPortFree+0x66>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	60bb      	str	r3, [r7, #8]
}
 800680c:	bf00      	nop
 800680e:	bf00      	nop
 8006810:	e7fd      	b.n	800680e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <vPortFree+0xbc>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01e      	beq.n	800685e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11a      	bne.n	800685e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	4b0e      	ldr	r3, [pc, #56]	@ (8006868 <vPortFree+0xbc>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	43db      	mvns	r3, r3
 8006832:	401a      	ands	r2, r3
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006838:	f7ff fa38 	bl	8005cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <vPortFree+0xc0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4413      	add	r3, r2
 8006846:	4a09      	ldr	r2, [pc, #36]	@ (800686c <vPortFree+0xc0>)
 8006848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800684a:	6938      	ldr	r0, [r7, #16]
 800684c:	f000 f874 	bl	8006938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006850:	4b07      	ldr	r3, [pc, #28]	@ (8006870 <vPortFree+0xc4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	4a06      	ldr	r2, [pc, #24]	@ (8006870 <vPortFree+0xc4>)
 8006858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800685a:	f7ff fa35 	bl	8005cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	200012cc 	.word	0x200012cc
 800686c:	200012bc 	.word	0x200012bc
 8006870:	200012c8 	.word	0x200012c8

08006874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800687a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800687e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006880:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <prvHeapInit+0xac>)
 8006882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00c      	beq.n	80068a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3307      	adds	r3, #7
 8006892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0307 	bic.w	r3, r3, #7
 800689a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006920 <prvHeapInit+0xac>)
 80068a4:	4413      	add	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006924 <prvHeapInit+0xb0>)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006924 <prvHeapInit+0xb0>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	4413      	add	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068c0:	2208      	movs	r2, #8
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0307 	bic.w	r3, r3, #7
 80068ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <prvHeapInit+0xb4>)
 80068d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068d6:	4b14      	ldr	r3, [pc, #80]	@ (8006928 <prvHeapInit+0xb4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2200      	movs	r2, #0
 80068dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068de:	4b12      	ldr	r3, [pc, #72]	@ (8006928 <prvHeapInit+0xb4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006928 <prvHeapInit+0xb4>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a0a      	ldr	r2, [pc, #40]	@ (800692c <prvHeapInit+0xb8>)
 8006902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4a09      	ldr	r2, [pc, #36]	@ (8006930 <prvHeapInit+0xbc>)
 800690a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800690c:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <prvHeapInit+0xc0>)
 800690e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006912:	601a      	str	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	200006b0 	.word	0x200006b0
 8006924:	200012b0 	.word	0x200012b0
 8006928:	200012b8 	.word	0x200012b8
 800692c:	200012c0 	.word	0x200012c0
 8006930:	200012bc 	.word	0x200012bc
 8006934:	200012cc 	.word	0x200012cc

08006938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006940:	4b27      	ldr	r3, [pc, #156]	@ (80069e0 <prvInsertBlockIntoFreeList+0xa8>)
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e002      	b.n	800694c <prvInsertBlockIntoFreeList+0x14>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	429a      	cmp	r2, r3
 8006954:	d8f7      	bhi.n	8006946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4413      	add	r3, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d108      	bne.n	800697a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	441a      	add	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	441a      	add	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d118      	bne.n	80069c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b14      	ldr	r3, [pc, #80]	@ (80069e4 <prvInsertBlockIntoFreeList+0xac>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d00d      	beq.n	80069b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	441a      	add	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e008      	b.n	80069c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069b6:	4b0b      	ldr	r3, [pc, #44]	@ (80069e4 <prvInsertBlockIntoFreeList+0xac>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e003      	b.n	80069c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d002      	beq.n	80069d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr
 80069e0:	200012b0 	.word	0x200012b0
 80069e4:	200012b8 	.word	0x200012b8

080069e8 <atoi>:
 80069e8:	220a      	movs	r2, #10
 80069ea:	2100      	movs	r1, #0
 80069ec:	f000 b87a 	b.w	8006ae4 <strtol>

080069f0 <_strtol_l.constprop.0>:
 80069f0:	2b24      	cmp	r3, #36	@ 0x24
 80069f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f6:	4686      	mov	lr, r0
 80069f8:	4690      	mov	r8, r2
 80069fa:	d801      	bhi.n	8006a00 <_strtol_l.constprop.0+0x10>
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d106      	bne.n	8006a0e <_strtol_l.constprop.0+0x1e>
 8006a00:	f000 f8a2 	bl	8006b48 <__errno>
 8006a04:	2316      	movs	r3, #22
 8006a06:	6003      	str	r3, [r0, #0]
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0e:	460d      	mov	r5, r1
 8006a10:	4833      	ldr	r0, [pc, #204]	@ (8006ae0 <_strtol_l.constprop.0+0xf0>)
 8006a12:	462a      	mov	r2, r5
 8006a14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a18:	5d06      	ldrb	r6, [r0, r4]
 8006a1a:	f016 0608 	ands.w	r6, r6, #8
 8006a1e:	d1f8      	bne.n	8006a12 <_strtol_l.constprop.0+0x22>
 8006a20:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a22:	d12d      	bne.n	8006a80 <_strtol_l.constprop.0+0x90>
 8006a24:	2601      	movs	r6, #1
 8006a26:	782c      	ldrb	r4, [r5, #0]
 8006a28:	1c95      	adds	r5, r2, #2
 8006a2a:	f033 0210 	bics.w	r2, r3, #16
 8006a2e:	d109      	bne.n	8006a44 <_strtol_l.constprop.0+0x54>
 8006a30:	2c30      	cmp	r4, #48	@ 0x30
 8006a32:	d12a      	bne.n	8006a8a <_strtol_l.constprop.0+0x9a>
 8006a34:	782a      	ldrb	r2, [r5, #0]
 8006a36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a3a:	2a58      	cmp	r2, #88	@ 0x58
 8006a3c:	d125      	bne.n	8006a8a <_strtol_l.constprop.0+0x9a>
 8006a3e:	2310      	movs	r3, #16
 8006a40:	786c      	ldrb	r4, [r5, #1]
 8006a42:	3502      	adds	r5, #2
 8006a44:	2200      	movs	r2, #0
 8006a46:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006a4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a4e:	fbbc f9f3 	udiv	r9, ip, r3
 8006a52:	4610      	mov	r0, r2
 8006a54:	fb03 ca19 	mls	sl, r3, r9, ip
 8006a58:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006a5c:	2f09      	cmp	r7, #9
 8006a5e:	d81b      	bhi.n	8006a98 <_strtol_l.constprop.0+0xa8>
 8006a60:	463c      	mov	r4, r7
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	dd27      	ble.n	8006ab6 <_strtol_l.constprop.0+0xc6>
 8006a66:	1c57      	adds	r7, r2, #1
 8006a68:	d007      	beq.n	8006a7a <_strtol_l.constprop.0+0x8a>
 8006a6a:	4581      	cmp	r9, r0
 8006a6c:	d320      	bcc.n	8006ab0 <_strtol_l.constprop.0+0xc0>
 8006a6e:	d101      	bne.n	8006a74 <_strtol_l.constprop.0+0x84>
 8006a70:	45a2      	cmp	sl, r4
 8006a72:	db1d      	blt.n	8006ab0 <_strtol_l.constprop.0+0xc0>
 8006a74:	2201      	movs	r2, #1
 8006a76:	fb00 4003 	mla	r0, r0, r3, r4
 8006a7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a7e:	e7eb      	b.n	8006a58 <_strtol_l.constprop.0+0x68>
 8006a80:	2c2b      	cmp	r4, #43	@ 0x2b
 8006a82:	bf04      	itt	eq
 8006a84:	782c      	ldrbeq	r4, [r5, #0]
 8006a86:	1c95      	addeq	r5, r2, #2
 8006a88:	e7cf      	b.n	8006a2a <_strtol_l.constprop.0+0x3a>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1da      	bne.n	8006a44 <_strtol_l.constprop.0+0x54>
 8006a8e:	2c30      	cmp	r4, #48	@ 0x30
 8006a90:	bf0c      	ite	eq
 8006a92:	2308      	moveq	r3, #8
 8006a94:	230a      	movne	r3, #10
 8006a96:	e7d5      	b.n	8006a44 <_strtol_l.constprop.0+0x54>
 8006a98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006a9c:	2f19      	cmp	r7, #25
 8006a9e:	d801      	bhi.n	8006aa4 <_strtol_l.constprop.0+0xb4>
 8006aa0:	3c37      	subs	r4, #55	@ 0x37
 8006aa2:	e7de      	b.n	8006a62 <_strtol_l.constprop.0+0x72>
 8006aa4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006aa8:	2f19      	cmp	r7, #25
 8006aaa:	d804      	bhi.n	8006ab6 <_strtol_l.constprop.0+0xc6>
 8006aac:	3c57      	subs	r4, #87	@ 0x57
 8006aae:	e7d8      	b.n	8006a62 <_strtol_l.constprop.0+0x72>
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	e7e1      	b.n	8006a7a <_strtol_l.constprop.0+0x8a>
 8006ab6:	1c53      	adds	r3, r2, #1
 8006ab8:	d108      	bne.n	8006acc <_strtol_l.constprop.0+0xdc>
 8006aba:	2322      	movs	r3, #34	@ 0x22
 8006abc:	4660      	mov	r0, ip
 8006abe:	f8ce 3000 	str.w	r3, [lr]
 8006ac2:	f1b8 0f00 	cmp.w	r8, #0
 8006ac6:	d0a0      	beq.n	8006a0a <_strtol_l.constprop.0+0x1a>
 8006ac8:	1e69      	subs	r1, r5, #1
 8006aca:	e006      	b.n	8006ada <_strtol_l.constprop.0+0xea>
 8006acc:	b106      	cbz	r6, 8006ad0 <_strtol_l.constprop.0+0xe0>
 8006ace:	4240      	negs	r0, r0
 8006ad0:	f1b8 0f00 	cmp.w	r8, #0
 8006ad4:	d099      	beq.n	8006a0a <_strtol_l.constprop.0+0x1a>
 8006ad6:	2a00      	cmp	r2, #0
 8006ad8:	d1f6      	bne.n	8006ac8 <_strtol_l.constprop.0+0xd8>
 8006ada:	f8c8 1000 	str.w	r1, [r8]
 8006ade:	e794      	b.n	8006a0a <_strtol_l.constprop.0+0x1a>
 8006ae0:	08007563 	.word	0x08007563

08006ae4 <strtol>:
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	460a      	mov	r2, r1
 8006ae8:	4601      	mov	r1, r0
 8006aea:	4802      	ldr	r0, [pc, #8]	@ (8006af4 <strtol+0x10>)
 8006aec:	6800      	ldr	r0, [r0, #0]
 8006aee:	f7ff bf7f 	b.w	80069f0 <_strtol_l.constprop.0>
 8006af2:	bf00      	nop
 8006af4:	20000014 	.word	0x20000014

08006af8 <siprintf>:
 8006af8:	b40e      	push	{r1, r2, r3}
 8006afa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006afe:	b500      	push	{lr}
 8006b00:	b09c      	sub	sp, #112	@ 0x70
 8006b02:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b04:	9002      	str	r0, [sp, #8]
 8006b06:	9006      	str	r0, [sp, #24]
 8006b08:	9107      	str	r1, [sp, #28]
 8006b0a:	9104      	str	r1, [sp, #16]
 8006b0c:	4808      	ldr	r0, [pc, #32]	@ (8006b30 <siprintf+0x38>)
 8006b0e:	4909      	ldr	r1, [pc, #36]	@ (8006b34 <siprintf+0x3c>)
 8006b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b14:	9105      	str	r1, [sp, #20]
 8006b16:	6800      	ldr	r0, [r0, #0]
 8006b18:	a902      	add	r1, sp, #8
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	f000 f9a0 	bl	8006e60 <_svfiprintf_r>
 8006b20:	2200      	movs	r2, #0
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	b01c      	add	sp, #112	@ 0x70
 8006b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b2c:	b003      	add	sp, #12
 8006b2e:	4770      	bx	lr
 8006b30:	20000014 	.word	0x20000014
 8006b34:	ffff0208 	.word	0xffff0208

08006b38 <memset>:
 8006b38:	4603      	mov	r3, r0
 8006b3a:	4402      	add	r2, r0
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d100      	bne.n	8006b42 <memset+0xa>
 8006b40:	4770      	bx	lr
 8006b42:	f803 1b01 	strb.w	r1, [r3], #1
 8006b46:	e7f9      	b.n	8006b3c <memset+0x4>

08006b48 <__errno>:
 8006b48:	4b01      	ldr	r3, [pc, #4]	@ (8006b50 <__errno+0x8>)
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000014 	.word	0x20000014

08006b54 <__libc_init_array>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	2600      	movs	r6, #0
 8006b58:	4d0c      	ldr	r5, [pc, #48]	@ (8006b8c <__libc_init_array+0x38>)
 8006b5a:	4c0d      	ldr	r4, [pc, #52]	@ (8006b90 <__libc_init_array+0x3c>)
 8006b5c:	1b64      	subs	r4, r4, r5
 8006b5e:	10a4      	asrs	r4, r4, #2
 8006b60:	42a6      	cmp	r6, r4
 8006b62:	d109      	bne.n	8006b78 <__libc_init_array+0x24>
 8006b64:	f000 fc78 	bl	8007458 <_init>
 8006b68:	2600      	movs	r6, #0
 8006b6a:	4d0a      	ldr	r5, [pc, #40]	@ (8006b94 <__libc_init_array+0x40>)
 8006b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8006b98 <__libc_init_array+0x44>)
 8006b6e:	1b64      	subs	r4, r4, r5
 8006b70:	10a4      	asrs	r4, r4, #2
 8006b72:	42a6      	cmp	r6, r4
 8006b74:	d105      	bne.n	8006b82 <__libc_init_array+0x2e>
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b7c:	4798      	blx	r3
 8006b7e:	3601      	adds	r6, #1
 8006b80:	e7ee      	b.n	8006b60 <__libc_init_array+0xc>
 8006b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b86:	4798      	blx	r3
 8006b88:	3601      	adds	r6, #1
 8006b8a:	e7f2      	b.n	8006b72 <__libc_init_array+0x1e>
 8006b8c:	080076a0 	.word	0x080076a0
 8006b90:	080076a0 	.word	0x080076a0
 8006b94:	080076a0 	.word	0x080076a0
 8006b98:	080076a4 	.word	0x080076a4

08006b9c <__retarget_lock_acquire_recursive>:
 8006b9c:	4770      	bx	lr

08006b9e <__retarget_lock_release_recursive>:
 8006b9e:	4770      	bx	lr

08006ba0 <memcpy>:
 8006ba0:	440a      	add	r2, r1
 8006ba2:	4291      	cmp	r1, r2
 8006ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ba8:	d100      	bne.n	8006bac <memcpy+0xc>
 8006baa:	4770      	bx	lr
 8006bac:	b510      	push	{r4, lr}
 8006bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bb2:	4291      	cmp	r1, r2
 8006bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bb8:	d1f9      	bne.n	8006bae <memcpy+0xe>
 8006bba:	bd10      	pop	{r4, pc}

08006bbc <_free_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	2900      	cmp	r1, #0
 8006bc2:	d040      	beq.n	8006c46 <_free_r+0x8a>
 8006bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc8:	1f0c      	subs	r4, r1, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bfb8      	it	lt
 8006bce:	18e4      	addlt	r4, r4, r3
 8006bd0:	f000 f8de 	bl	8006d90 <__malloc_lock>
 8006bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c48 <_free_r+0x8c>)
 8006bd6:	6813      	ldr	r3, [r2, #0]
 8006bd8:	b933      	cbnz	r3, 8006be8 <_free_r+0x2c>
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	6014      	str	r4, [r2, #0]
 8006bde:	4628      	mov	r0, r5
 8006be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be4:	f000 b8da 	b.w	8006d9c <__malloc_unlock>
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	d908      	bls.n	8006bfe <_free_r+0x42>
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	1821      	adds	r1, r4, r0
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf01      	itttt	eq
 8006bf4:	6819      	ldreq	r1, [r3, #0]
 8006bf6:	685b      	ldreq	r3, [r3, #4]
 8006bf8:	1809      	addeq	r1, r1, r0
 8006bfa:	6021      	streq	r1, [r4, #0]
 8006bfc:	e7ed      	b.n	8006bda <_free_r+0x1e>
 8006bfe:	461a      	mov	r2, r3
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	b10b      	cbz	r3, 8006c08 <_free_r+0x4c>
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	d9fa      	bls.n	8006bfe <_free_r+0x42>
 8006c08:	6811      	ldr	r1, [r2, #0]
 8006c0a:	1850      	adds	r0, r2, r1
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	d10b      	bne.n	8006c28 <_free_r+0x6c>
 8006c10:	6820      	ldr	r0, [r4, #0]
 8006c12:	4401      	add	r1, r0
 8006c14:	1850      	adds	r0, r2, r1
 8006c16:	4283      	cmp	r3, r0
 8006c18:	6011      	str	r1, [r2, #0]
 8006c1a:	d1e0      	bne.n	8006bde <_free_r+0x22>
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	4408      	add	r0, r1
 8006c22:	6010      	str	r0, [r2, #0]
 8006c24:	6053      	str	r3, [r2, #4]
 8006c26:	e7da      	b.n	8006bde <_free_r+0x22>
 8006c28:	d902      	bls.n	8006c30 <_free_r+0x74>
 8006c2a:	230c      	movs	r3, #12
 8006c2c:	602b      	str	r3, [r5, #0]
 8006c2e:	e7d6      	b.n	8006bde <_free_r+0x22>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	1821      	adds	r1, r4, r0
 8006c34:	428b      	cmp	r3, r1
 8006c36:	bf01      	itttt	eq
 8006c38:	6819      	ldreq	r1, [r3, #0]
 8006c3a:	685b      	ldreq	r3, [r3, #4]
 8006c3c:	1809      	addeq	r1, r1, r0
 8006c3e:	6021      	streq	r1, [r4, #0]
 8006c40:	6063      	str	r3, [r4, #4]
 8006c42:	6054      	str	r4, [r2, #4]
 8006c44:	e7cb      	b.n	8006bde <_free_r+0x22>
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	20001414 	.word	0x20001414

08006c4c <sbrk_aligned>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c8c <sbrk_aligned+0x40>)
 8006c50:	460c      	mov	r4, r1
 8006c52:	6831      	ldr	r1, [r6, #0]
 8006c54:	4605      	mov	r5, r0
 8006c56:	b911      	cbnz	r1, 8006c5e <sbrk_aligned+0x12>
 8006c58:	f000 fbaa 	bl	80073b0 <_sbrk_r>
 8006c5c:	6030      	str	r0, [r6, #0]
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 fba5 	bl	80073b0 <_sbrk_r>
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	d103      	bne.n	8006c72 <sbrk_aligned+0x26>
 8006c6a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c6e:	4620      	mov	r0, r4
 8006c70:	bd70      	pop	{r4, r5, r6, pc}
 8006c72:	1cc4      	adds	r4, r0, #3
 8006c74:	f024 0403 	bic.w	r4, r4, #3
 8006c78:	42a0      	cmp	r0, r4
 8006c7a:	d0f8      	beq.n	8006c6e <sbrk_aligned+0x22>
 8006c7c:	1a21      	subs	r1, r4, r0
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f000 fb96 	bl	80073b0 <_sbrk_r>
 8006c84:	3001      	adds	r0, #1
 8006c86:	d1f2      	bne.n	8006c6e <sbrk_aligned+0x22>
 8006c88:	e7ef      	b.n	8006c6a <sbrk_aligned+0x1e>
 8006c8a:	bf00      	nop
 8006c8c:	20001410 	.word	0x20001410

08006c90 <_malloc_r>:
 8006c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c94:	1ccd      	adds	r5, r1, #3
 8006c96:	f025 0503 	bic.w	r5, r5, #3
 8006c9a:	3508      	adds	r5, #8
 8006c9c:	2d0c      	cmp	r5, #12
 8006c9e:	bf38      	it	cc
 8006ca0:	250c      	movcc	r5, #12
 8006ca2:	2d00      	cmp	r5, #0
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	db01      	blt.n	8006cac <_malloc_r+0x1c>
 8006ca8:	42a9      	cmp	r1, r5
 8006caa:	d904      	bls.n	8006cb6 <_malloc_r+0x26>
 8006cac:	230c      	movs	r3, #12
 8006cae:	6033      	str	r3, [r6, #0]
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d8c <_malloc_r+0xfc>
 8006cba:	f000 f869 	bl	8006d90 <__malloc_lock>
 8006cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc2:	461c      	mov	r4, r3
 8006cc4:	bb44      	cbnz	r4, 8006d18 <_malloc_r+0x88>
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f7ff ffbf 	bl	8006c4c <sbrk_aligned>
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	d158      	bne.n	8006d86 <_malloc_r+0xf6>
 8006cd4:	f8d8 4000 	ldr.w	r4, [r8]
 8006cd8:	4627      	mov	r7, r4
 8006cda:	2f00      	cmp	r7, #0
 8006cdc:	d143      	bne.n	8006d66 <_malloc_r+0xd6>
 8006cde:	2c00      	cmp	r4, #0
 8006ce0:	d04b      	beq.n	8006d7a <_malloc_r+0xea>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	eb04 0903 	add.w	r9, r4, r3
 8006cec:	f000 fb60 	bl	80073b0 <_sbrk_r>
 8006cf0:	4581      	cmp	r9, r0
 8006cf2:	d142      	bne.n	8006d7a <_malloc_r+0xea>
 8006cf4:	6821      	ldr	r1, [r4, #0]
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	1a6d      	subs	r5, r5, r1
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	f7ff ffa6 	bl	8006c4c <sbrk_aligned>
 8006d00:	3001      	adds	r0, #1
 8006d02:	d03a      	beq.n	8006d7a <_malloc_r+0xea>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	442b      	add	r3, r5
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	bb62      	cbnz	r2, 8006d6c <_malloc_r+0xdc>
 8006d12:	f8c8 7000 	str.w	r7, [r8]
 8006d16:	e00f      	b.n	8006d38 <_malloc_r+0xa8>
 8006d18:	6822      	ldr	r2, [r4, #0]
 8006d1a:	1b52      	subs	r2, r2, r5
 8006d1c:	d420      	bmi.n	8006d60 <_malloc_r+0xd0>
 8006d1e:	2a0b      	cmp	r2, #11
 8006d20:	d917      	bls.n	8006d52 <_malloc_r+0xc2>
 8006d22:	1961      	adds	r1, r4, r5
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	6025      	str	r5, [r4, #0]
 8006d28:	bf18      	it	ne
 8006d2a:	6059      	strne	r1, [r3, #4]
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	bf08      	it	eq
 8006d30:	f8c8 1000 	streq.w	r1, [r8]
 8006d34:	5162      	str	r2, [r4, r5]
 8006d36:	604b      	str	r3, [r1, #4]
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f000 f82f 	bl	8006d9c <__malloc_unlock>
 8006d3e:	f104 000b 	add.w	r0, r4, #11
 8006d42:	1d23      	adds	r3, r4, #4
 8006d44:	f020 0007 	bic.w	r0, r0, #7
 8006d48:	1ac2      	subs	r2, r0, r3
 8006d4a:	bf1c      	itt	ne
 8006d4c:	1a1b      	subne	r3, r3, r0
 8006d4e:	50a3      	strne	r3, [r4, r2]
 8006d50:	e7af      	b.n	8006cb2 <_malloc_r+0x22>
 8006d52:	6862      	ldr	r2, [r4, #4]
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	bf0c      	ite	eq
 8006d58:	f8c8 2000 	streq.w	r2, [r8]
 8006d5c:	605a      	strne	r2, [r3, #4]
 8006d5e:	e7eb      	b.n	8006d38 <_malloc_r+0xa8>
 8006d60:	4623      	mov	r3, r4
 8006d62:	6864      	ldr	r4, [r4, #4]
 8006d64:	e7ae      	b.n	8006cc4 <_malloc_r+0x34>
 8006d66:	463c      	mov	r4, r7
 8006d68:	687f      	ldr	r7, [r7, #4]
 8006d6a:	e7b6      	b.n	8006cda <_malloc_r+0x4a>
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d1fb      	bne.n	8006d6c <_malloc_r+0xdc>
 8006d74:	2300      	movs	r3, #0
 8006d76:	6053      	str	r3, [r2, #4]
 8006d78:	e7de      	b.n	8006d38 <_malloc_r+0xa8>
 8006d7a:	230c      	movs	r3, #12
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	6033      	str	r3, [r6, #0]
 8006d80:	f000 f80c 	bl	8006d9c <__malloc_unlock>
 8006d84:	e794      	b.n	8006cb0 <_malloc_r+0x20>
 8006d86:	6005      	str	r5, [r0, #0]
 8006d88:	e7d6      	b.n	8006d38 <_malloc_r+0xa8>
 8006d8a:	bf00      	nop
 8006d8c:	20001414 	.word	0x20001414

08006d90 <__malloc_lock>:
 8006d90:	4801      	ldr	r0, [pc, #4]	@ (8006d98 <__malloc_lock+0x8>)
 8006d92:	f7ff bf03 	b.w	8006b9c <__retarget_lock_acquire_recursive>
 8006d96:	bf00      	nop
 8006d98:	2000140c 	.word	0x2000140c

08006d9c <__malloc_unlock>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	@ (8006da4 <__malloc_unlock+0x8>)
 8006d9e:	f7ff befe 	b.w	8006b9e <__retarget_lock_release_recursive>
 8006da2:	bf00      	nop
 8006da4:	2000140c 	.word	0x2000140c

08006da8 <__ssputs_r>:
 8006da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dac:	461f      	mov	r7, r3
 8006dae:	688e      	ldr	r6, [r1, #8]
 8006db0:	4682      	mov	sl, r0
 8006db2:	42be      	cmp	r6, r7
 8006db4:	460c      	mov	r4, r1
 8006db6:	4690      	mov	r8, r2
 8006db8:	680b      	ldr	r3, [r1, #0]
 8006dba:	d82d      	bhi.n	8006e18 <__ssputs_r+0x70>
 8006dbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006dc4:	d026      	beq.n	8006e14 <__ssputs_r+0x6c>
 8006dc6:	6965      	ldr	r5, [r4, #20]
 8006dc8:	6909      	ldr	r1, [r1, #16]
 8006dca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dce:	eba3 0901 	sub.w	r9, r3, r1
 8006dd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dd6:	1c7b      	adds	r3, r7, #1
 8006dd8:	444b      	add	r3, r9
 8006dda:	106d      	asrs	r5, r5, #1
 8006ddc:	429d      	cmp	r5, r3
 8006dde:	bf38      	it	cc
 8006de0:	461d      	movcc	r5, r3
 8006de2:	0553      	lsls	r3, r2, #21
 8006de4:	d527      	bpl.n	8006e36 <__ssputs_r+0x8e>
 8006de6:	4629      	mov	r1, r5
 8006de8:	f7ff ff52 	bl	8006c90 <_malloc_r>
 8006dec:	4606      	mov	r6, r0
 8006dee:	b360      	cbz	r0, 8006e4a <__ssputs_r+0xa2>
 8006df0:	464a      	mov	r2, r9
 8006df2:	6921      	ldr	r1, [r4, #16]
 8006df4:	f7ff fed4 	bl	8006ba0 <memcpy>
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e02:	81a3      	strh	r3, [r4, #12]
 8006e04:	6126      	str	r6, [r4, #16]
 8006e06:	444e      	add	r6, r9
 8006e08:	6026      	str	r6, [r4, #0]
 8006e0a:	463e      	mov	r6, r7
 8006e0c:	6165      	str	r5, [r4, #20]
 8006e0e:	eba5 0509 	sub.w	r5, r5, r9
 8006e12:	60a5      	str	r5, [r4, #8]
 8006e14:	42be      	cmp	r6, r7
 8006e16:	d900      	bls.n	8006e1a <__ssputs_r+0x72>
 8006e18:	463e      	mov	r6, r7
 8006e1a:	4632      	mov	r2, r6
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	6820      	ldr	r0, [r4, #0]
 8006e20:	f000 faac 	bl	800737c <memmove>
 8006e24:	2000      	movs	r0, #0
 8006e26:	68a3      	ldr	r3, [r4, #8]
 8006e28:	1b9b      	subs	r3, r3, r6
 8006e2a:	60a3      	str	r3, [r4, #8]
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	4433      	add	r3, r6
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e36:	462a      	mov	r2, r5
 8006e38:	f000 fad8 	bl	80073ec <_realloc_r>
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d1e0      	bne.n	8006e04 <__ssputs_r+0x5c>
 8006e42:	4650      	mov	r0, sl
 8006e44:	6921      	ldr	r1, [r4, #16]
 8006e46:	f7ff feb9 	bl	8006bbc <_free_r>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	f8ca 3000 	str.w	r3, [sl]
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	f04f 30ff 	mov.w	r0, #4294967295
 8006e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	e7e9      	b.n	8006e32 <__ssputs_r+0x8a>
	...

08006e60 <_svfiprintf_r>:
 8006e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e64:	4698      	mov	r8, r3
 8006e66:	898b      	ldrh	r3, [r1, #12]
 8006e68:	4607      	mov	r7, r0
 8006e6a:	061b      	lsls	r3, r3, #24
 8006e6c:	460d      	mov	r5, r1
 8006e6e:	4614      	mov	r4, r2
 8006e70:	b09d      	sub	sp, #116	@ 0x74
 8006e72:	d510      	bpl.n	8006e96 <_svfiprintf_r+0x36>
 8006e74:	690b      	ldr	r3, [r1, #16]
 8006e76:	b973      	cbnz	r3, 8006e96 <_svfiprintf_r+0x36>
 8006e78:	2140      	movs	r1, #64	@ 0x40
 8006e7a:	f7ff ff09 	bl	8006c90 <_malloc_r>
 8006e7e:	6028      	str	r0, [r5, #0]
 8006e80:	6128      	str	r0, [r5, #16]
 8006e82:	b930      	cbnz	r0, 8006e92 <_svfiprintf_r+0x32>
 8006e84:	230c      	movs	r3, #12
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8c:	b01d      	add	sp, #116	@ 0x74
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	2340      	movs	r3, #64	@ 0x40
 8006e94:	616b      	str	r3, [r5, #20]
 8006e96:	2300      	movs	r3, #0
 8006e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9a:	2320      	movs	r3, #32
 8006e9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ea0:	2330      	movs	r3, #48	@ 0x30
 8006ea2:	f04f 0901 	mov.w	r9, #1
 8006ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eaa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007044 <_svfiprintf_r+0x1e4>
 8006eae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	469a      	mov	sl, r3
 8006eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eba:	b10a      	cbz	r2, 8006ec0 <_svfiprintf_r+0x60>
 8006ebc:	2a25      	cmp	r2, #37	@ 0x25
 8006ebe:	d1f9      	bne.n	8006eb4 <_svfiprintf_r+0x54>
 8006ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ec4:	d00b      	beq.n	8006ede <_svfiprintf_r+0x7e>
 8006ec6:	465b      	mov	r3, fp
 8006ec8:	4622      	mov	r2, r4
 8006eca:	4629      	mov	r1, r5
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f7ff ff6b 	bl	8006da8 <__ssputs_r>
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f000 80a7 	beq.w	8007026 <_svfiprintf_r+0x1c6>
 8006ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eda:	445a      	add	r2, fp
 8006edc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ede:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 809f 	beq.w	8007026 <_svfiprintf_r+0x1c6>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295
 8006eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ef2:	f10a 0a01 	add.w	sl, sl, #1
 8006ef6:	9304      	str	r3, [sp, #16]
 8006ef8:	9307      	str	r3, [sp, #28]
 8006efa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006efe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f00:	4654      	mov	r4, sl
 8006f02:	2205      	movs	r2, #5
 8006f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f08:	484e      	ldr	r0, [pc, #312]	@ (8007044 <_svfiprintf_r+0x1e4>)
 8006f0a:	f000 fa61 	bl	80073d0 <memchr>
 8006f0e:	9a04      	ldr	r2, [sp, #16]
 8006f10:	b9d8      	cbnz	r0, 8006f4a <_svfiprintf_r+0xea>
 8006f12:	06d0      	lsls	r0, r2, #27
 8006f14:	bf44      	itt	mi
 8006f16:	2320      	movmi	r3, #32
 8006f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f1c:	0711      	lsls	r1, r2, #28
 8006f1e:	bf44      	itt	mi
 8006f20:	232b      	movmi	r3, #43	@ 0x2b
 8006f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f26:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f2c:	d015      	beq.n	8006f5a <_svfiprintf_r+0xfa>
 8006f2e:	4654      	mov	r4, sl
 8006f30:	2000      	movs	r0, #0
 8006f32:	f04f 0c0a 	mov.w	ip, #10
 8006f36:	9a07      	ldr	r2, [sp, #28]
 8006f38:	4621      	mov	r1, r4
 8006f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f3e:	3b30      	subs	r3, #48	@ 0x30
 8006f40:	2b09      	cmp	r3, #9
 8006f42:	d94b      	bls.n	8006fdc <_svfiprintf_r+0x17c>
 8006f44:	b1b0      	cbz	r0, 8006f74 <_svfiprintf_r+0x114>
 8006f46:	9207      	str	r2, [sp, #28]
 8006f48:	e014      	b.n	8006f74 <_svfiprintf_r+0x114>
 8006f4a:	eba0 0308 	sub.w	r3, r0, r8
 8006f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f52:	4313      	orrs	r3, r2
 8006f54:	46a2      	mov	sl, r4
 8006f56:	9304      	str	r3, [sp, #16]
 8006f58:	e7d2      	b.n	8006f00 <_svfiprintf_r+0xa0>
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	1d19      	adds	r1, r3, #4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	9103      	str	r1, [sp, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bfbb      	ittet	lt
 8006f66:	425b      	neglt	r3, r3
 8006f68:	f042 0202 	orrlt.w	r2, r2, #2
 8006f6c:	9307      	strge	r3, [sp, #28]
 8006f6e:	9307      	strlt	r3, [sp, #28]
 8006f70:	bfb8      	it	lt
 8006f72:	9204      	strlt	r2, [sp, #16]
 8006f74:	7823      	ldrb	r3, [r4, #0]
 8006f76:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f78:	d10a      	bne.n	8006f90 <_svfiprintf_r+0x130>
 8006f7a:	7863      	ldrb	r3, [r4, #1]
 8006f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f7e:	d132      	bne.n	8006fe6 <_svfiprintf_r+0x186>
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	3402      	adds	r4, #2
 8006f84:	1d1a      	adds	r2, r3, #4
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	9203      	str	r2, [sp, #12]
 8006f8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f8e:	9305      	str	r3, [sp, #20]
 8006f90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007048 <_svfiprintf_r+0x1e8>
 8006f94:	2203      	movs	r2, #3
 8006f96:	4650      	mov	r0, sl
 8006f98:	7821      	ldrb	r1, [r4, #0]
 8006f9a:	f000 fa19 	bl	80073d0 <memchr>
 8006f9e:	b138      	cbz	r0, 8006fb0 <_svfiprintf_r+0x150>
 8006fa0:	2240      	movs	r2, #64	@ 0x40
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	eba0 000a 	sub.w	r0, r0, sl
 8006fa8:	4082      	lsls	r2, r0
 8006faa:	4313      	orrs	r3, r2
 8006fac:	3401      	adds	r4, #1
 8006fae:	9304      	str	r3, [sp, #16]
 8006fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb4:	2206      	movs	r2, #6
 8006fb6:	4825      	ldr	r0, [pc, #148]	@ (800704c <_svfiprintf_r+0x1ec>)
 8006fb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fbc:	f000 fa08 	bl	80073d0 <memchr>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d036      	beq.n	8007032 <_svfiprintf_r+0x1d2>
 8006fc4:	4b22      	ldr	r3, [pc, #136]	@ (8007050 <_svfiprintf_r+0x1f0>)
 8006fc6:	bb1b      	cbnz	r3, 8007010 <_svfiprintf_r+0x1b0>
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	3307      	adds	r3, #7
 8006fcc:	f023 0307 	bic.w	r3, r3, #7
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	9303      	str	r3, [sp, #12]
 8006fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd6:	4433      	add	r3, r6
 8006fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fda:	e76a      	b.n	8006eb2 <_svfiprintf_r+0x52>
 8006fdc:	460c      	mov	r4, r1
 8006fde:	2001      	movs	r0, #1
 8006fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fe4:	e7a8      	b.n	8006f38 <_svfiprintf_r+0xd8>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f04f 0c0a 	mov.w	ip, #10
 8006fec:	4619      	mov	r1, r3
 8006fee:	3401      	adds	r4, #1
 8006ff0:	9305      	str	r3, [sp, #20]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ff8:	3a30      	subs	r2, #48	@ 0x30
 8006ffa:	2a09      	cmp	r2, #9
 8006ffc:	d903      	bls.n	8007006 <_svfiprintf_r+0x1a6>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0c6      	beq.n	8006f90 <_svfiprintf_r+0x130>
 8007002:	9105      	str	r1, [sp, #20]
 8007004:	e7c4      	b.n	8006f90 <_svfiprintf_r+0x130>
 8007006:	4604      	mov	r4, r0
 8007008:	2301      	movs	r3, #1
 800700a:	fb0c 2101 	mla	r1, ip, r1, r2
 800700e:	e7f0      	b.n	8006ff2 <_svfiprintf_r+0x192>
 8007010:	ab03      	add	r3, sp, #12
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	462a      	mov	r2, r5
 8007016:	4638      	mov	r0, r7
 8007018:	4b0e      	ldr	r3, [pc, #56]	@ (8007054 <_svfiprintf_r+0x1f4>)
 800701a:	a904      	add	r1, sp, #16
 800701c:	f3af 8000 	nop.w
 8007020:	1c42      	adds	r2, r0, #1
 8007022:	4606      	mov	r6, r0
 8007024:	d1d6      	bne.n	8006fd4 <_svfiprintf_r+0x174>
 8007026:	89ab      	ldrh	r3, [r5, #12]
 8007028:	065b      	lsls	r3, r3, #25
 800702a:	f53f af2d 	bmi.w	8006e88 <_svfiprintf_r+0x28>
 800702e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007030:	e72c      	b.n	8006e8c <_svfiprintf_r+0x2c>
 8007032:	ab03      	add	r3, sp, #12
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	462a      	mov	r2, r5
 8007038:	4638      	mov	r0, r7
 800703a:	4b06      	ldr	r3, [pc, #24]	@ (8007054 <_svfiprintf_r+0x1f4>)
 800703c:	a904      	add	r1, sp, #16
 800703e:	f000 f87d 	bl	800713c <_printf_i>
 8007042:	e7ed      	b.n	8007020 <_svfiprintf_r+0x1c0>
 8007044:	08007663 	.word	0x08007663
 8007048:	08007669 	.word	0x08007669
 800704c:	0800766d 	.word	0x0800766d
 8007050:	00000000 	.word	0x00000000
 8007054:	08006da9 	.word	0x08006da9

08007058 <_printf_common>:
 8007058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	4616      	mov	r6, r2
 800705e:	4698      	mov	r8, r3
 8007060:	688a      	ldr	r2, [r1, #8]
 8007062:	690b      	ldr	r3, [r1, #16]
 8007064:	4607      	mov	r7, r0
 8007066:	4293      	cmp	r3, r2
 8007068:	bfb8      	it	lt
 800706a:	4613      	movlt	r3, r2
 800706c:	6033      	str	r3, [r6, #0]
 800706e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007072:	460c      	mov	r4, r1
 8007074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007078:	b10a      	cbz	r2, 800707e <_printf_common+0x26>
 800707a:	3301      	adds	r3, #1
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	0699      	lsls	r1, r3, #26
 8007082:	bf42      	ittt	mi
 8007084:	6833      	ldrmi	r3, [r6, #0]
 8007086:	3302      	addmi	r3, #2
 8007088:	6033      	strmi	r3, [r6, #0]
 800708a:	6825      	ldr	r5, [r4, #0]
 800708c:	f015 0506 	ands.w	r5, r5, #6
 8007090:	d106      	bne.n	80070a0 <_printf_common+0x48>
 8007092:	f104 0a19 	add.w	sl, r4, #25
 8007096:	68e3      	ldr	r3, [r4, #12]
 8007098:	6832      	ldr	r2, [r6, #0]
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	42ab      	cmp	r3, r5
 800709e:	dc2b      	bgt.n	80070f8 <_printf_common+0xa0>
 80070a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070a4:	6822      	ldr	r2, [r4, #0]
 80070a6:	3b00      	subs	r3, #0
 80070a8:	bf18      	it	ne
 80070aa:	2301      	movne	r3, #1
 80070ac:	0692      	lsls	r2, r2, #26
 80070ae:	d430      	bmi.n	8007112 <_printf_common+0xba>
 80070b0:	4641      	mov	r1, r8
 80070b2:	4638      	mov	r0, r7
 80070b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070b8:	47c8      	blx	r9
 80070ba:	3001      	adds	r0, #1
 80070bc:	d023      	beq.n	8007106 <_printf_common+0xae>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	6922      	ldr	r2, [r4, #16]
 80070c2:	f003 0306 	and.w	r3, r3, #6
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	bf14      	ite	ne
 80070ca:	2500      	movne	r5, #0
 80070cc:	6833      	ldreq	r3, [r6, #0]
 80070ce:	f04f 0600 	mov.w	r6, #0
 80070d2:	bf08      	it	eq
 80070d4:	68e5      	ldreq	r5, [r4, #12]
 80070d6:	f104 041a 	add.w	r4, r4, #26
 80070da:	bf08      	it	eq
 80070dc:	1aed      	subeq	r5, r5, r3
 80070de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80070e2:	bf08      	it	eq
 80070e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e8:	4293      	cmp	r3, r2
 80070ea:	bfc4      	itt	gt
 80070ec:	1a9b      	subgt	r3, r3, r2
 80070ee:	18ed      	addgt	r5, r5, r3
 80070f0:	42b5      	cmp	r5, r6
 80070f2:	d11a      	bne.n	800712a <_printf_common+0xd2>
 80070f4:	2000      	movs	r0, #0
 80070f6:	e008      	b.n	800710a <_printf_common+0xb2>
 80070f8:	2301      	movs	r3, #1
 80070fa:	4652      	mov	r2, sl
 80070fc:	4641      	mov	r1, r8
 80070fe:	4638      	mov	r0, r7
 8007100:	47c8      	blx	r9
 8007102:	3001      	adds	r0, #1
 8007104:	d103      	bne.n	800710e <_printf_common+0xb6>
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710e:	3501      	adds	r5, #1
 8007110:	e7c1      	b.n	8007096 <_printf_common+0x3e>
 8007112:	2030      	movs	r0, #48	@ 0x30
 8007114:	18e1      	adds	r1, r4, r3
 8007116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007120:	4422      	add	r2, r4
 8007122:	3302      	adds	r3, #2
 8007124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007128:	e7c2      	b.n	80070b0 <_printf_common+0x58>
 800712a:	2301      	movs	r3, #1
 800712c:	4622      	mov	r2, r4
 800712e:	4641      	mov	r1, r8
 8007130:	4638      	mov	r0, r7
 8007132:	47c8      	blx	r9
 8007134:	3001      	adds	r0, #1
 8007136:	d0e6      	beq.n	8007106 <_printf_common+0xae>
 8007138:	3601      	adds	r6, #1
 800713a:	e7d9      	b.n	80070f0 <_printf_common+0x98>

0800713c <_printf_i>:
 800713c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	7e0f      	ldrb	r7, [r1, #24]
 8007142:	4691      	mov	r9, r2
 8007144:	2f78      	cmp	r7, #120	@ 0x78
 8007146:	4680      	mov	r8, r0
 8007148:	460c      	mov	r4, r1
 800714a:	469a      	mov	sl, r3
 800714c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800714e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007152:	d807      	bhi.n	8007164 <_printf_i+0x28>
 8007154:	2f62      	cmp	r7, #98	@ 0x62
 8007156:	d80a      	bhi.n	800716e <_printf_i+0x32>
 8007158:	2f00      	cmp	r7, #0
 800715a:	f000 80d3 	beq.w	8007304 <_printf_i+0x1c8>
 800715e:	2f58      	cmp	r7, #88	@ 0x58
 8007160:	f000 80ba 	beq.w	80072d8 <_printf_i+0x19c>
 8007164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800716c:	e03a      	b.n	80071e4 <_printf_i+0xa8>
 800716e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007172:	2b15      	cmp	r3, #21
 8007174:	d8f6      	bhi.n	8007164 <_printf_i+0x28>
 8007176:	a101      	add	r1, pc, #4	@ (adr r1, 800717c <_printf_i+0x40>)
 8007178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800717c:	080071d5 	.word	0x080071d5
 8007180:	080071e9 	.word	0x080071e9
 8007184:	08007165 	.word	0x08007165
 8007188:	08007165 	.word	0x08007165
 800718c:	08007165 	.word	0x08007165
 8007190:	08007165 	.word	0x08007165
 8007194:	080071e9 	.word	0x080071e9
 8007198:	08007165 	.word	0x08007165
 800719c:	08007165 	.word	0x08007165
 80071a0:	08007165 	.word	0x08007165
 80071a4:	08007165 	.word	0x08007165
 80071a8:	080072eb 	.word	0x080072eb
 80071ac:	08007213 	.word	0x08007213
 80071b0:	080072a5 	.word	0x080072a5
 80071b4:	08007165 	.word	0x08007165
 80071b8:	08007165 	.word	0x08007165
 80071bc:	0800730d 	.word	0x0800730d
 80071c0:	08007165 	.word	0x08007165
 80071c4:	08007213 	.word	0x08007213
 80071c8:	08007165 	.word	0x08007165
 80071cc:	08007165 	.word	0x08007165
 80071d0:	080072ad 	.word	0x080072ad
 80071d4:	6833      	ldr	r3, [r6, #0]
 80071d6:	1d1a      	adds	r2, r3, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6032      	str	r2, [r6, #0]
 80071dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071e4:	2301      	movs	r3, #1
 80071e6:	e09e      	b.n	8007326 <_printf_i+0x1ea>
 80071e8:	6833      	ldr	r3, [r6, #0]
 80071ea:	6820      	ldr	r0, [r4, #0]
 80071ec:	1d19      	adds	r1, r3, #4
 80071ee:	6031      	str	r1, [r6, #0]
 80071f0:	0606      	lsls	r6, r0, #24
 80071f2:	d501      	bpl.n	80071f8 <_printf_i+0xbc>
 80071f4:	681d      	ldr	r5, [r3, #0]
 80071f6:	e003      	b.n	8007200 <_printf_i+0xc4>
 80071f8:	0645      	lsls	r5, r0, #25
 80071fa:	d5fb      	bpl.n	80071f4 <_printf_i+0xb8>
 80071fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007200:	2d00      	cmp	r5, #0
 8007202:	da03      	bge.n	800720c <_printf_i+0xd0>
 8007204:	232d      	movs	r3, #45	@ 0x2d
 8007206:	426d      	negs	r5, r5
 8007208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800720c:	230a      	movs	r3, #10
 800720e:	4859      	ldr	r0, [pc, #356]	@ (8007374 <_printf_i+0x238>)
 8007210:	e011      	b.n	8007236 <_printf_i+0xfa>
 8007212:	6821      	ldr	r1, [r4, #0]
 8007214:	6833      	ldr	r3, [r6, #0]
 8007216:	0608      	lsls	r0, r1, #24
 8007218:	f853 5b04 	ldr.w	r5, [r3], #4
 800721c:	d402      	bmi.n	8007224 <_printf_i+0xe8>
 800721e:	0649      	lsls	r1, r1, #25
 8007220:	bf48      	it	mi
 8007222:	b2ad      	uxthmi	r5, r5
 8007224:	2f6f      	cmp	r7, #111	@ 0x6f
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	bf14      	ite	ne
 800722a:	230a      	movne	r3, #10
 800722c:	2308      	moveq	r3, #8
 800722e:	4851      	ldr	r0, [pc, #324]	@ (8007374 <_printf_i+0x238>)
 8007230:	2100      	movs	r1, #0
 8007232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007236:	6866      	ldr	r6, [r4, #4]
 8007238:	2e00      	cmp	r6, #0
 800723a:	bfa8      	it	ge
 800723c:	6821      	ldrge	r1, [r4, #0]
 800723e:	60a6      	str	r6, [r4, #8]
 8007240:	bfa4      	itt	ge
 8007242:	f021 0104 	bicge.w	r1, r1, #4
 8007246:	6021      	strge	r1, [r4, #0]
 8007248:	b90d      	cbnz	r5, 800724e <_printf_i+0x112>
 800724a:	2e00      	cmp	r6, #0
 800724c:	d04b      	beq.n	80072e6 <_printf_i+0x1aa>
 800724e:	4616      	mov	r6, r2
 8007250:	fbb5 f1f3 	udiv	r1, r5, r3
 8007254:	fb03 5711 	mls	r7, r3, r1, r5
 8007258:	5dc7      	ldrb	r7, [r0, r7]
 800725a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800725e:	462f      	mov	r7, r5
 8007260:	42bb      	cmp	r3, r7
 8007262:	460d      	mov	r5, r1
 8007264:	d9f4      	bls.n	8007250 <_printf_i+0x114>
 8007266:	2b08      	cmp	r3, #8
 8007268:	d10b      	bne.n	8007282 <_printf_i+0x146>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	07df      	lsls	r7, r3, #31
 800726e:	d508      	bpl.n	8007282 <_printf_i+0x146>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	6861      	ldr	r1, [r4, #4]
 8007274:	4299      	cmp	r1, r3
 8007276:	bfde      	ittt	le
 8007278:	2330      	movle	r3, #48	@ 0x30
 800727a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800727e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007282:	1b92      	subs	r2, r2, r6
 8007284:	6122      	str	r2, [r4, #16]
 8007286:	464b      	mov	r3, r9
 8007288:	4621      	mov	r1, r4
 800728a:	4640      	mov	r0, r8
 800728c:	f8cd a000 	str.w	sl, [sp]
 8007290:	aa03      	add	r2, sp, #12
 8007292:	f7ff fee1 	bl	8007058 <_printf_common>
 8007296:	3001      	adds	r0, #1
 8007298:	d14a      	bne.n	8007330 <_printf_i+0x1f4>
 800729a:	f04f 30ff 	mov.w	r0, #4294967295
 800729e:	b004      	add	sp, #16
 80072a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	f043 0320 	orr.w	r3, r3, #32
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	2778      	movs	r7, #120	@ 0x78
 80072ae:	4832      	ldr	r0, [pc, #200]	@ (8007378 <_printf_i+0x23c>)
 80072b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	6831      	ldr	r1, [r6, #0]
 80072b8:	061f      	lsls	r7, r3, #24
 80072ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80072be:	d402      	bmi.n	80072c6 <_printf_i+0x18a>
 80072c0:	065f      	lsls	r7, r3, #25
 80072c2:	bf48      	it	mi
 80072c4:	b2ad      	uxthmi	r5, r5
 80072c6:	6031      	str	r1, [r6, #0]
 80072c8:	07d9      	lsls	r1, r3, #31
 80072ca:	bf44      	itt	mi
 80072cc:	f043 0320 	orrmi.w	r3, r3, #32
 80072d0:	6023      	strmi	r3, [r4, #0]
 80072d2:	b11d      	cbz	r5, 80072dc <_printf_i+0x1a0>
 80072d4:	2310      	movs	r3, #16
 80072d6:	e7ab      	b.n	8007230 <_printf_i+0xf4>
 80072d8:	4826      	ldr	r0, [pc, #152]	@ (8007374 <_printf_i+0x238>)
 80072da:	e7e9      	b.n	80072b0 <_printf_i+0x174>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	f023 0320 	bic.w	r3, r3, #32
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	e7f6      	b.n	80072d4 <_printf_i+0x198>
 80072e6:	4616      	mov	r6, r2
 80072e8:	e7bd      	b.n	8007266 <_printf_i+0x12a>
 80072ea:	6833      	ldr	r3, [r6, #0]
 80072ec:	6825      	ldr	r5, [r4, #0]
 80072ee:	1d18      	adds	r0, r3, #4
 80072f0:	6961      	ldr	r1, [r4, #20]
 80072f2:	6030      	str	r0, [r6, #0]
 80072f4:	062e      	lsls	r6, r5, #24
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	d501      	bpl.n	80072fe <_printf_i+0x1c2>
 80072fa:	6019      	str	r1, [r3, #0]
 80072fc:	e002      	b.n	8007304 <_printf_i+0x1c8>
 80072fe:	0668      	lsls	r0, r5, #25
 8007300:	d5fb      	bpl.n	80072fa <_printf_i+0x1be>
 8007302:	8019      	strh	r1, [r3, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	4616      	mov	r6, r2
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	e7bc      	b.n	8007286 <_printf_i+0x14a>
 800730c:	6833      	ldr	r3, [r6, #0]
 800730e:	2100      	movs	r1, #0
 8007310:	1d1a      	adds	r2, r3, #4
 8007312:	6032      	str	r2, [r6, #0]
 8007314:	681e      	ldr	r6, [r3, #0]
 8007316:	6862      	ldr	r2, [r4, #4]
 8007318:	4630      	mov	r0, r6
 800731a:	f000 f859 	bl	80073d0 <memchr>
 800731e:	b108      	cbz	r0, 8007324 <_printf_i+0x1e8>
 8007320:	1b80      	subs	r0, r0, r6
 8007322:	6060      	str	r0, [r4, #4]
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	2300      	movs	r3, #0
 800732a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800732e:	e7aa      	b.n	8007286 <_printf_i+0x14a>
 8007330:	4632      	mov	r2, r6
 8007332:	4649      	mov	r1, r9
 8007334:	4640      	mov	r0, r8
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	47d0      	blx	sl
 800733a:	3001      	adds	r0, #1
 800733c:	d0ad      	beq.n	800729a <_printf_i+0x15e>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	079b      	lsls	r3, r3, #30
 8007342:	d413      	bmi.n	800736c <_printf_i+0x230>
 8007344:	68e0      	ldr	r0, [r4, #12]
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	4298      	cmp	r0, r3
 800734a:	bfb8      	it	lt
 800734c:	4618      	movlt	r0, r3
 800734e:	e7a6      	b.n	800729e <_printf_i+0x162>
 8007350:	2301      	movs	r3, #1
 8007352:	4632      	mov	r2, r6
 8007354:	4649      	mov	r1, r9
 8007356:	4640      	mov	r0, r8
 8007358:	47d0      	blx	sl
 800735a:	3001      	adds	r0, #1
 800735c:	d09d      	beq.n	800729a <_printf_i+0x15e>
 800735e:	3501      	adds	r5, #1
 8007360:	68e3      	ldr	r3, [r4, #12]
 8007362:	9903      	ldr	r1, [sp, #12]
 8007364:	1a5b      	subs	r3, r3, r1
 8007366:	42ab      	cmp	r3, r5
 8007368:	dcf2      	bgt.n	8007350 <_printf_i+0x214>
 800736a:	e7eb      	b.n	8007344 <_printf_i+0x208>
 800736c:	2500      	movs	r5, #0
 800736e:	f104 0619 	add.w	r6, r4, #25
 8007372:	e7f5      	b.n	8007360 <_printf_i+0x224>
 8007374:	08007674 	.word	0x08007674
 8007378:	08007685 	.word	0x08007685

0800737c <memmove>:
 800737c:	4288      	cmp	r0, r1
 800737e:	b510      	push	{r4, lr}
 8007380:	eb01 0402 	add.w	r4, r1, r2
 8007384:	d902      	bls.n	800738c <memmove+0x10>
 8007386:	4284      	cmp	r4, r0
 8007388:	4623      	mov	r3, r4
 800738a:	d807      	bhi.n	800739c <memmove+0x20>
 800738c:	1e43      	subs	r3, r0, #1
 800738e:	42a1      	cmp	r1, r4
 8007390:	d008      	beq.n	80073a4 <memmove+0x28>
 8007392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800739a:	e7f8      	b.n	800738e <memmove+0x12>
 800739c:	4601      	mov	r1, r0
 800739e:	4402      	add	r2, r0
 80073a0:	428a      	cmp	r2, r1
 80073a2:	d100      	bne.n	80073a6 <memmove+0x2a>
 80073a4:	bd10      	pop	{r4, pc}
 80073a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ae:	e7f7      	b.n	80073a0 <memmove+0x24>

080073b0 <_sbrk_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	2300      	movs	r3, #0
 80073b4:	4d05      	ldr	r5, [pc, #20]	@ (80073cc <_sbrk_r+0x1c>)
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	f7fa fb44 	bl	8001a48 <_sbrk>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_sbrk_r+0x1a>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_sbrk_r+0x1a>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20001408 	.word	0x20001408

080073d0 <memchr>:
 80073d0:	4603      	mov	r3, r0
 80073d2:	b510      	push	{r4, lr}
 80073d4:	b2c9      	uxtb	r1, r1
 80073d6:	4402      	add	r2, r0
 80073d8:	4293      	cmp	r3, r2
 80073da:	4618      	mov	r0, r3
 80073dc:	d101      	bne.n	80073e2 <memchr+0x12>
 80073de:	2000      	movs	r0, #0
 80073e0:	e003      	b.n	80073ea <memchr+0x1a>
 80073e2:	7804      	ldrb	r4, [r0, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	428c      	cmp	r4, r1
 80073e8:	d1f6      	bne.n	80073d8 <memchr+0x8>
 80073ea:	bd10      	pop	{r4, pc}

080073ec <_realloc_r>:
 80073ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f0:	4680      	mov	r8, r0
 80073f2:	4615      	mov	r5, r2
 80073f4:	460c      	mov	r4, r1
 80073f6:	b921      	cbnz	r1, 8007402 <_realloc_r+0x16>
 80073f8:	4611      	mov	r1, r2
 80073fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	f7ff bc47 	b.w	8006c90 <_malloc_r>
 8007402:	b92a      	cbnz	r2, 8007410 <_realloc_r+0x24>
 8007404:	f7ff fbda 	bl	8006bbc <_free_r>
 8007408:	2400      	movs	r4, #0
 800740a:	4620      	mov	r0, r4
 800740c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007410:	f000 f81a 	bl	8007448 <_malloc_usable_size_r>
 8007414:	4285      	cmp	r5, r0
 8007416:	4606      	mov	r6, r0
 8007418:	d802      	bhi.n	8007420 <_realloc_r+0x34>
 800741a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800741e:	d8f4      	bhi.n	800740a <_realloc_r+0x1e>
 8007420:	4629      	mov	r1, r5
 8007422:	4640      	mov	r0, r8
 8007424:	f7ff fc34 	bl	8006c90 <_malloc_r>
 8007428:	4607      	mov	r7, r0
 800742a:	2800      	cmp	r0, #0
 800742c:	d0ec      	beq.n	8007408 <_realloc_r+0x1c>
 800742e:	42b5      	cmp	r5, r6
 8007430:	462a      	mov	r2, r5
 8007432:	4621      	mov	r1, r4
 8007434:	bf28      	it	cs
 8007436:	4632      	movcs	r2, r6
 8007438:	f7ff fbb2 	bl	8006ba0 <memcpy>
 800743c:	4621      	mov	r1, r4
 800743e:	4640      	mov	r0, r8
 8007440:	f7ff fbbc 	bl	8006bbc <_free_r>
 8007444:	463c      	mov	r4, r7
 8007446:	e7e0      	b.n	800740a <_realloc_r+0x1e>

08007448 <_malloc_usable_size_r>:
 8007448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800744c:	1f18      	subs	r0, r3, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	bfbc      	itt	lt
 8007452:	580b      	ldrlt	r3, [r1, r0]
 8007454:	18c0      	addlt	r0, r0, r3
 8007456:	4770      	bx	lr

08007458 <_init>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	bf00      	nop
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr

08007464 <_fini>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	bf00      	nop
 8007468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746a:	bc08      	pop	{r3}
 800746c:	469e      	mov	lr, r3
 800746e:	4770      	bx	lr
